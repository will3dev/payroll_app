// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract BatchTransferCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        7577340843310636900702676180955849555068422009084918539783609808295413118394;
    uint256 public constant IC0_Y =
        7161434580211163080531704002782488994664620792842938054696374135706446884052;
    uint256 public constant IC1_X =
        19176026031397431998809432701136417522794732195561096437584098971675796915171;
    uint256 public constant IC1_Y =
        14650970486486989588618412321553600721332053654799950689675527714067827192062;
    uint256 public constant IC2_X =
        14771600688269414171816670189570672640317551662433330041801352533339139948380;
    uint256 public constant IC2_Y =
        18828801112948434297504425092587372958203739418713122006848434332907923214793;
    uint256 public constant IC3_X =
        15303532193263129552815802790663945041857265425873008291484627890030471301783;
    uint256 public constant IC3_Y =
        946775120237248349580129372116547998343480675064140358325863245945047969171;
    uint256 public constant IC4_X =
        184166369273805284207198122137811386110775930302359518412697969783216974558;
    uint256 public constant IC4_Y =
        20430845502083147370405211573651207382874669963266726112586347737833159227685;
    uint256 public constant IC5_X =
        18973241930131212192986302470876858665265262030381233986355320038325200208093;
    uint256 public constant IC5_Y =
        8145858246334452426857781817618426483286533091051282473345211109440771404092;
    uint256 public constant IC6_X =
        1743469013700481349502868853902618837478527012439598926878993038796761621333;
    uint256 public constant IC6_Y =
        8095484832046033631387618799659233815723223201462269151773561751614742805353;
    uint256 public constant IC7_X =
        5575869480935439070718456564163502275848697075120821972739591950607714995457;
    uint256 public constant IC7_Y =
        8618197231379680043035756736858873714704007613652339257691327915248203284248;
    uint256 public constant IC8_X =
        10108198238273574790353045303876860250610195249468099338342629972770843630971;
    uint256 public constant IC8_Y =
        6215530133577547930220366900850148395055522659744466869615442949572423753541;
    uint256 public constant IC9_X =
        12461015293241520734569813300686118372846551047935262062330337973628429859654;
    uint256 public constant IC9_Y =
        6467466224149254045809879427976490445065677274671626099224803062959983287388;
    uint256 public constant IC10_X =
        5528712304411879252592446367615854069405669173003762588826175332137610038244;
    uint256 public constant IC10_Y =
        18422051976281167108408877145651090785642542446628926740838328268966027981920;
    uint256 public constant IC11_X =
        15858123581747253021007103802801808507726485975086714508800114827240664207516;
    uint256 public constant IC11_Y =
        6062188089272044601511970307350921443214234945355007940457104230600492827678;
    uint256 public constant IC12_X =
        9253433887078564718486631101037288233268985020128161672807083566382171896574;
    uint256 public constant IC12_Y =
        15635192926652287413314284838384163687000988873882908916147143513365778439573;
    uint256 public constant IC13_X =
        3397287059064281848396661118124820562565447328626525538983931005918087301852;
    uint256 public constant IC13_Y =
        7089194676869770758367894397741602795345376734977198739324347429578856232391;
    uint256 public constant IC14_X =
        20103093937030641548721200614825228408612830726140530183712974542049469179103;
    uint256 public constant IC14_Y =
        7326181674515553543983473301576485190054472193177157007172654812053979707408;
    uint256 public constant IC15_X =
        2043795992287380858766161633276358162005455444401296229868131162173557654764;
    uint256 public constant IC15_Y =
        2202653382259347043160363083109834817051661707179266418284774919263698223598;
    uint256 public constant IC16_X =
        11637678566525575518838135491241151263640111240839828723348845680407806379324;
    uint256 public constant IC16_Y =
        9438888665066302517601913024002478960793744875640158162172389008819823477404;
    uint256 public constant IC17_X =
        18598765915428809217561507558446527015568118038096159581496863536067350965491;
    uint256 public constant IC17_Y =
        4066908174462773947446671201231236113836615598516744089541713385698863290394;
    uint256 public constant IC18_X =
        17715433445080228272394014491036107725670564023753991776880364519401199975585;
    uint256 public constant IC18_Y =
        14091727112265593338531489507054791563474233688361180398038147887645719250567;
    uint256 public constant IC19_X =
        12066588538850804675176972051205603197734633717237921554829887925846732504292;
    uint256 public constant IC19_Y =
        18350804558213510654546537405362246459028698694150517352370729596797799942652;
    uint256 public constant IC20_X =
        4128222242633163244767195793011893154972903866323509087832023452226211995230;
    uint256 public constant IC20_Y =
        21370278710869836657242444408916765573202268928830958470392161108224320571787;
    uint256 public constant IC21_X =
        5512069185345826217120516087408265648049846960041336215759770578383481530269;
    uint256 public constant IC21_Y =
        4476240020841771672811777595656081881433086172120818072221322421914751776454;
    uint256 public constant IC22_X =
        3411925688984697558056130768170363290846417549247390742960463204212761496045;
    uint256 public constant IC22_Y =
        16800055260720126241566668474637132050683763094182019792207726287013444389354;
    uint256 public constant IC23_X =
        4292282795861865082292860177488801353123239009130557621216361288433139850953;
    uint256 public constant IC23_Y =
        10882172036875591792116959932786752618626392986931428617108919698141941625003;
    uint256 public constant IC24_X =
        8593405464221038660122052807214949006246528901964240526172356511314611007257;
    uint256 public constant IC24_Y =
        17460470549833390647605567926372289912725982541268619060150610018150790922946;
    uint256 public constant IC25_X =
        1140735563228295454552698720697953691517030362079397827988786516973902325137;
    uint256 public constant IC25_Y =
        14030585184577473942084260416785448752087224532495138006275026771506161986296;
    uint256 public constant IC26_X =
        5514121913046699988865008794243996921481318229050304599233449219682862347709;
    uint256 public constant IC26_Y =
        11347524171581977421386749422532861678872397385232582841623999225375179646268;
    uint256 public constant IC27_X =
        2459829336029994809125413329588748405020544338122194570508361987868266998152;
    uint256 public constant IC27_Y =
        5900054513136100006177908866198943354942224718646639294304420219073873756528;
    uint256 public constant IC28_X =
        15742138614963173959815948278861246535225376502104419826842752934684803117688;
    uint256 public constant IC28_Y =
        8059773093182654614674785301286859690229676422016712524641246322903673094986;
    uint256 public constant IC29_X =
        6537710432967960171170863845065572439814581258221771467244569937091855595330;
    uint256 public constant IC29_Y =
        4813078833182540218772206629486931674140947443337918680095476868095676174550;
    uint256 public constant IC30_X =
        11618254919947029739874231310949928360975465638151629731196868927584581773661;
    uint256 public constant IC30_Y =
        17600834674061118793655044271372118545133637557514900433713992889459735788734;
    uint256 public constant IC31_X =
        1750875956606165218566696968513600203661348735863634009592839394062325942378;
    uint256 public constant IC31_Y =
        9119817863628615824429493869990006437275559509790199315482708142538012333979;
    uint256 public constant IC32_X =
        18343961968101812352835246119519036419296211125954523067273060853709840573856;
    uint256 public constant IC32_Y =
        16732060330455737186901378365114117235380243243995929535957642384289716430051;
    uint256 public constant IC33_X =
        14177921901569461454006255785084593250372535211014453330800127272091928175478;
    uint256 public constant IC33_Y =
        19977057898328880434264424533799916316079718594131438948991239036130748846674;
    uint256 public constant IC34_X =
        18161497937241559858087997103768094461078665889778005656298732916432989343561;
    uint256 public constant IC34_Y =
        5661629185989014853965495909449046479352034838561095126086421171407930926380;
    uint256 public constant IC35_X =
        14773666796180727920726963985345910861412102363673393749528578787045489374060;
    uint256 public constant IC35_Y =
        409971040849406579254340605212732339246500525618651600028314504029948171043;
    uint256 public constant IC36_X =
        19316409598229827224859501442363920712506665864558184612643391856429809696667;
    uint256 public constant IC36_Y =
        17096514260533879631042700239780139190959883888850427866266573153896419637831;
    uint256 public constant IC37_X =
        109108729730332327188835261171569329740988822515243139621400204448331590634;
    uint256 public constant IC37_Y =
        609794260121289076927625791435588220792156277496161033092152965311930770777;
    uint256 public constant IC38_X =
        20464780867745488471488741999802449271730998655308340827416609825181741733251;
    uint256 public constant IC38_Y =
        7824533834502110278857722857396719096535400260060316378841835583501824708920;
    uint256 public constant IC39_X =
        15295662226453163096231308971431011027856737525010850040603404208537527396001;
    uint256 public constant IC39_Y =
        19348431384312226233527694205860059710188334667390269416289280916868008884455;
    uint256 public constant IC40_X =
        16605482284841366370485543618405765770197684887875012137470896685611986536042;
    uint256 public constant IC40_Y =
        5574305037276115643682293358698339944281545045202441614706350987371025764817;
    uint256 public constant IC41_X =
        4536087611521108459801279499866291612078771675431096971098568257316286951317;
    uint256 public constant IC41_Y =
        6960786061057902140004893736548516870452283966573668174166838427678551341497;
    uint256 public constant IC42_X =
        5951988804094166112593667912655894516121184516475398232329351048135386822232;
    uint256 public constant IC42_Y =
        20129062031939857843137376371865092419680332312856931904048332179297257256748;
    uint256 public constant IC43_X =
        18327751740986982724384309540552900739588270989658329561439509243285145338120;
    uint256 public constant IC43_Y =
        4999327076287157708393140166024258600654925403069857769486600843552449281475;
    uint256 public constant IC44_X =
        5952883531531566064221564897276560013208325306977877166112545189075526715358;
    uint256 public constant IC44_Y =
        12577366550008018421617209788922805516491526367440147278686821626554465601320;
    uint256 public constant IC45_X =
        17592066029002450624605638995991903418324187038146278955669096591025673966169;
    uint256 public constant IC45_Y =
        9613566282460134986622482283222984207787340736711976709170128310851490063647;
    uint256 public constant IC46_X =
        8928439643995698545658057928155692549418638055552689516978554600887031014082;
    uint256 public constant IC46_Y =
        20062849737246061073566938178086827885772421647617189230311989955259692254125;
    uint256 public constant IC47_X =
        20619830975031668517975122032893928576718094613231395900325461253827057944108;
    uint256 public constant IC47_Y =
        981809454184941755331891620673555817504276296107165121257496872881606856476;
    uint256 public constant IC48_X =
        13937549622436608889572399548727858212204377430552439661477159519944608923479;
    uint256 public constant IC48_Y =
        13532851762387584485078466624227441623077784417256678638264104896674280537832;
    uint256 public constant IC49_X =
        19388194072992518480072825388009202435898691815331282516529602252050765337201;
    uint256 public constant IC49_Y =
        1359543800242056261378557495721278121023639166636202957297103255568203291457;
    uint256 public constant IC50_X =
        8940461766537918326955434428786611300577879290768976793995609258876270243963;
    uint256 public constant IC50_Y =
        6416103276885156449625604414967765684565892728797262010556070073439532746554;
    uint256 public constant IC51_X =
        19000993528400222704225780904416162342558963500845336861025349519474970152710;
    uint256 public constant IC51_Y =
        20575575764433022240124315913026799305007757059639321115660469057340176264082;
    uint256 public constant IC52_X =
        21579163397817353005664210012793266627113266242907602565642427865543076147106;
    uint256 public constant IC52_Y =
        5233357911955450377630692660435457889035316967244414553364394692144722778862;
    uint256 public constant IC53_X =
        5024053011031065432597272761171403174989950861116399387213284994961566773934;
    uint256 public constant IC53_Y =
        1946963470128979395205510016045083395172038528384624331773629967047603847481;
    uint256 public constant IC54_X =
        11752466688149301710984992066572997338378369358602247530055384324204020008408;
    uint256 public constant IC54_Y =
        10522148502798373797730460908657788245954842927096543647972044948499041434139;
    uint256 public constant IC55_X =
        416189043607393541799912174964993222268598289050880498453885110634014902710;
    uint256 public constant IC55_Y =
        1146678587984423171020327511652458108325014259105975927749375898382981882690;
    uint256 public constant IC56_X =
        19748051829863869487069885810925844628649339470465563183718881126946012555567;
    uint256 public constant IC56_Y =
        11400317108657739066747820380516856422799756828154709997846911873365112951306;
    uint256 public constant IC57_X =
        21702885815276057610901382230146679712185061726840991279239858167466743961512;
    uint256 public constant IC57_Y =
        14526996256208574786127508120505354055928768530625123529344503263563962615580;
    uint256 public constant IC58_X =
        2075608427370028030729405288349362915855606694784082976842952161704771436911;
    uint256 public constant IC58_Y =
        5976018080226190057651652759354037917955921732092612256351006004375824015931;
    uint256 public constant IC59_X =
        3998582156440462189919406136971253158634875993213886775035603668963687729625;
    uint256 public constant IC59_Y =
        15463792171258865125741792353543614514916651434268994010431870862879824774030;
    uint256 public constant IC60_X =
        16612965884957218784913341531699232653528526169743883560012991621115218318587;
    uint256 public constant IC60_Y =
        349881842804170100068891695037822101208862073179926637169837033817413048417;
    uint256 public constant IC61_X =
        9945007273525122665278539181260436415521933817137735178326621473056486513549;
    uint256 public constant IC61_Y =
        18347111553839507681228936923877164638979334269770251736428175331449100677640;
    uint256 public constant IC62_X =
        12039427918709440260964693069044524981058860685140648257125162147548540038734;
    uint256 public constant IC62_Y =
        13871669417892509257830405828036877434925951307846182941727469747475703755426;
    uint256 public constant IC63_X =
        12608211987853565399111834845836046258462036433513341931503508645697835961987;
    uint256 public constant IC63_Y =
        12533583511182346422368940263341387418972056477753666980246849366083134559179;
    uint256 public constant IC64_X =
        689622599231500006486544691156595980952476841065780345427975119808327785860;
    uint256 public constant IC64_Y =
        3614466637035098587271584090145484952727782661081513300885814001355939656397;
    uint256 public constant IC65_X =
        13163196414487450222927449246180018943225207337995767130930579179609245274331;
    uint256 public constant IC65_Y =
        18354258399173078398027703173536238786062084688345271255088315700886687262588;
    uint256 public constant IC66_X =
        21837594379799485577373136711318556574951403532960721095794782245172193792967;
    uint256 public constant IC66_Y =
        4799441906177412144211592485053973885507774112287511480009240204223460076726;
    uint256 public constant IC67_X =
        14082290233230768189492023835984231290196105635458064335068366267901324111430;
    uint256 public constant IC67_Y =
        3392066665880534339937077969630427092849478551549536025186760289983158505911;
    uint256 public constant IC68_X =
        4962656692749958401913475513812583925704795736372127635197974323214687511777;
    uint256 public constant IC68_Y =
        12022348064321322746037356877016679702216778721330797882326998155506886586187;
    uint256 public constant IC69_X =
        12411856150982469136906742190617019197364692894372638270771258610951767988218;
    uint256 public constant IC69_Y =
        10778565914609675685390678590929499448262420173697196875805403040597592080834;
    uint256 public constant IC70_X =
        16979980870463440164741728056439495410716480762597977776001418548861214558776;
    uint256 public constant IC70_Y =
        15666294101679634453487967647878295177319091060890962559970068898210388033575;
    uint256 public constant IC71_X =
        4102383649815846037195872598140899913516603181736989246095305575227959320814;
    uint256 public constant IC71_Y =
        1486506953522618150037500696438941367317419694082960868771254415931507643620;
    uint256 public constant IC72_X =
        11094132575298814021380417441050608775866882824101711853766894251477740239516;
    uint256 public constant IC72_Y =
        17378923389557100614619394782394621988836515351207339339710767222234100121788;
    uint256 public constant IC73_X =
        18245147884917608107364669221152736157158922881706535871679780965233163891039;
    uint256 public constant IC73_Y =
        10363811527078360382767787912324420365537101280879870265983570536045243180446;
    uint256 public constant IC74_X =
        17364445479768527270826230463711473423364367499616009365870457684038667397639;
    uint256 public constant IC74_Y =
        17810764229599503757219313079640739824735536663356879424753837161602762456055;
    uint256 public constant IC75_X =
        20585736649327823105465510482132808451087377624615994615945574673298832837346;
    uint256 public constant IC75_Y =
        14803742604113917370169741453896813377294957228722560206976342977105310623341;
    uint256 public constant IC76_X =
        2385336967202093546050798319574947512684577087524771785250326276974925572968;
    uint256 public constant IC76_Y =
        11270739842601956301442501305192373612269236165165894699713004649830023837128;
    uint256 public constant IC77_X =
        12908517795016172098486831520753302811487947255688422270669320588091528891736;
    uint256 public constant IC77_Y =
        1541544298380205388847439170986471711826602803947902817505069970496366722806;
    uint256 public constant IC78_X =
        7489456306102584638166281744903185102755169269562076848872618197896344487296;
    uint256 public constant IC78_Y =
        20633385539981020962436296646984842974280911376396407251149302292861534675329;
    uint256 public constant IC79_X =
        5231769134039557416986684632517007855135518235336194010239739988910886335364;
    uint256 public constant IC79_Y =
        5635192383066623778159585927651156833431532685625158798471197457841635186120;
    uint256 public constant IC80_X =
        11442710804724282916902470209943901677030748164738553086552743718259521429083;
    uint256 public constant IC80_Y =
        4881446613430769865829948170374094542779314349210211800050378457904198427837;
    uint256 public constant IC81_X =
        13255284099995184638929043440744522416691774151914168977994996089117332173899;
    uint256 public constant IC81_Y =
        6389588936636776001570404553192523704545999454559309740921037598402954291560;
    uint256 public constant IC82_X =
        14324920977508930958200047136480598273502090878817839215070890582070709208862;
    uint256 public constant IC82_Y =
        13774943254923957996911086939773079020351894306579741405603970323047308781813;
    uint256 public constant IC83_X =
        14550614288803210519643874416996458348805628832876013099467193295204009212448;
    uint256 public constant IC83_Y =
        19215358126064352662498781002626297372985945466378619652144743932499135387596;
    uint256 public constant IC84_X =
        2810996774869683799311350967989180352269468379881797879825163089462261633034;
    uint256 public constant IC84_Y =
        18336862222506482425940986371594246012809244923810820235598793081333720564312;
    uint256 public constant IC85_X =
        8732691410706460332687115549363053649337799867143766822285001506047534376684;
    uint256 public constant IC85_Y =
        8127920116582660282759832953342513790681153889962391630428878799282298924954;
    uint256 public constant IC86_X =
        13662359235678738981355646867325895686890188306300976888820337667808969213394;
    uint256 public constant IC86_Y =
        5896169431975154024872609821549962127930246312037256386997641780954631382011;
    uint256 public constant IC87_X =
        13205796661865790706449716792132521520143881452438198585910284251917150107514;
    uint256 public constant IC87_Y =
        4079352812186164904433551006415895920690341440337205475379848226264752469491;
    uint256 public constant IC88_X =
        15060491438832737232448696298498592056154039095393156884116332110676796739401;
    uint256 public constant IC88_Y =
        15553790540925737406387139829560644027169992126215068963916781505285031361201;
    uint256 public constant IC89_X =
        15027236019166911018354803369409630293325611072927971492717281453370695089077;
    uint256 public constant IC89_Y =
        18931881534337357883328511304646124331635897014098806519360076607503404393449;
    uint256 public constant IC90_X =
        6776999576635358717279073351316442380434593504977509217583323639666738385289;
    uint256 public constant IC90_Y =
        21476716168487911722060042240872226844592008239522981858203124361702065935007;
    uint256 public constant IC91_X =
        19798564226962964947182782716399021542162931013314604472244636923338369559244;
    uint256 public constant IC91_Y =
        10922107448070987761834381981090608213177797748790268811208928047731542627028;
    uint256 public constant IC92_X =
        9518197884291996140684819055739297024769094986097123033540034744053706528480;
    uint256 public constant IC92_Y =
        5060199004008010756487230390673338287177197751519076744399942451272839208748;
    uint256 public constant IC93_X =
        5173602050169964213317279424445751873778682125050047705638600192392757110012;
    uint256 public constant IC93_Y =
        95709858914720664751586056614783374573726883488971927786237658776108719497;
    uint256 public constant IC94_X =
        4047190825891259651380702262712363079085890811808914901227541411458981521053;
    uint256 public constant IC94_Y =
        8574489096195395915454618597969749653411401579916845465252678229592377609910;
    uint256 public constant IC95_X =
        5939310166406157193581839844185414824593336199472285113221805796654331888684;
    uint256 public constant IC95_Y =
        13677305615162623149774998282060385856168023263965035861541249416745545000088;
    uint256 public constant IC96_X =
        13900930237325516876745125484414404921696388251935233992514049351481530075705;
    uint256 public constant IC96_Y =
        12951218234079560799442583006864550066362938221358328398350673709289254987404;
    uint256 public constant IC97_X =
        17684483996201072381484020137893195096944734145244271847257327112370018217178;
    uint256 public constant IC97_Y =
        8361293476427563087464586127795396095829904205665323959159132767384416318020;
    uint256 public constant IC98_X =
        7547711275531364126585531192484290062247078632973359288665537169594346041716;
    uint256 public constant IC98_Y =
        16028797227874621906792332832843853993598135775994574272898856790773948876733;
    uint256 public constant IC99_X =
        17015820555407241420646617832100212967868399712276941745049685416348520664109;
    uint256 public constant IC99_Y =
        9248804752148533285914748065642937258879026472515069041328677286266846091573;
    uint256 public constant IC100_X =
        12376650163172332546378136878264734706533219580477002425711637848307666494973;
    uint256 public constant IC100_Y =
        16824373830502348634552886034265802874319442383511856625383467704358523810541;
    uint256 public constant IC101_X =
        19571190472020938382655544214813079800954097952559411767662147849617813920420;
    uint256 public constant IC101_Y =
        11467211134724364930107741504754241247337431470840180180729655594075231681985;
    uint256 public constant IC102_X =
        3588049991157116243415343844304363206421471517047005050419708889303822690477;
    uint256 public constant IC102_Y =
        19796954874683598579623159892885268836554104153862108512479868067431011120481;
    uint256 public constant IC103_X =
        5044488113843572780491954287915866261954015046118938786044097787388229242193;
    uint256 public constant IC103_Y =
        10680920783683689881973109378923911708840481752518909367493009151876097771150;
    uint256 public constant IC104_X =
        16439138155676640569435135373456592016760435309171574747896049329225040099694;
    uint256 public constant IC104_Y =
        5544443008910262616785948878539717157635161317660374827423414660464824700968;
    uint256 public constant IC105_X =
        19119116233802196284078701624629506215441506700252896234389951797214143954637;
    uint256 public constant IC105_Y =
        5013672297811738907657687241353972815913046489843456816866346117232216500194;
    uint256 public constant IC106_X =
        13352604757255841920668270567592165827414898562250351335948157915518838890586;
    uint256 public constant IC106_Y =
        2891901578559245318815350517168529002320966869797117700420013185254443105680;
    uint256 public constant IC107_X =
        12285357164841769548951730830148529628280882037985722520266320749593072294915;
    uint256 public constant IC107_Y =
        16507187155079823392749113172866840637965844799074314501338979399481059319041;
    uint256 public constant IC108_X =
        15185097472341972453913668241323885592203156218316817756179223678122321007613;
    uint256 public constant IC108_Y =
        14050729760251311413553945521280529273021925611269467027775825504171577345803;
    uint256 public constant IC109_X =
        5825035934526797434271283258913590356261852335881433405802252481453237714020;
    uint256 public constant IC109_Y =
        12929958996185011481237243583123974842153667471747468381875959093773287202033;
    uint256 public constant IC110_X =
        18037278108140228740486855882088936282526922031484252021312786214797149140783;
    uint256 public constant IC110_Y =
        14335286507330970965025281610777167221255118931047012843412619319267217694455;
    uint256 public constant IC111_X =
        717423487416568833059033575064167485376057841904535189926369213839487997037;
    uint256 public constant IC111_Y =
        9017883003797297417646647221752937072682179694504108943869873599013745456044;
    uint256 public constant IC112_X =
        10783953730860171112601892445547222290564897422794798129351314131581109029925;
    uint256 public constant IC112_Y =
        16927986594618966753587133478821404099303495359827330234915878249130726302989;
    uint256 public constant IC113_X =
        547375637164947191310016565739143411033330040082414519432303307176928573332;
    uint256 public constant IC113_Y =
        17955762654195545849983188119321782471363409686756757166314010411874273457552;
    uint256 public constant IC114_X =
        20675623972462504693336879550415332203324209141841038672548161760722431601353;
    uint256 public constant IC114_Y =
        14257017433660498496708184097114591305369824704092886388184639139481667895632;
    uint256 public constant IC115_X =
        20380249282323544684031996765020191022609222936842586305594666540894191127841;
    uint256 public constant IC115_Y =
        11911442250698219373576072794959717731379572859256799030348989054905736620012;
    uint256 public constant IC116_X =
        13899009372464738611650747709663171577453522301199182936955340818281030839996;
    uint256 public constant IC116_Y =
        14260842678298652311841509198826717917276455967632580166845133838517450913814;
    uint256 public constant IC117_X =
        76495089456748604027835166207199675036291838784941419215503870277349972588;
    uint256 public constant IC117_Y =
        5040235083414757223332926446774759887281520961686142075291876276225594497885;
    uint256 public constant IC118_X =
        6476366406053974042533796751090305567606120836087075417074662471271741203641;
    uint256 public constant IC118_Y =
        3957046887108712771466146907727836618975792443767687299657096475713046628094;
    uint256 public constant IC119_X =
        16809543270284228873534438630062612348716801655306481789479773343592518943354;
    uint256 public constant IC119_Y =
        14838454437094735888294331746510574993919461040081271288021289986724046070533;
    uint256 public constant IC120_X =
        18140675467610240117998340491920819687232745198259442933152909342661045848369;
    uint256 public constant IC120_Y =
        2305621370583754824239512567704610292137253442533081713449635546614710623568;
    uint256 public constant IC121_X =
        18979905257604521964715337143347629074415279417134296677273132748462892128332;
    uint256 public constant IC121_Y =
        17860881693377537318096408554249066544841099900118350701472220845540297662649;
    uint256 public constant IC122_X =
        2654245304702187146770388557867435594909101577779926519930201235507266488774;
    uint256 public constant IC122_Y =
        19409472565350187057725056948927692598359871441067702521738041136058841129819;
    uint256 public constant IC123_X =
        11917755547248775662134810593947615708686047636844731808303204126133904763838;
    uint256 public constant IC123_Y =
        9896505886171949182189859125702030493650787074817515250686690190895058950389;
    uint256 public constant IC124_X =
        9460566168402804551303303187464722108015978746563828018434580358651212924136;
    uint256 public constant IC124_Y =
        1393642787384438964744075410055676667958200006064741339030846877163587771971;
    uint256 public constant IC125_X =
        13380643612412269517096679958785488512090586762968975175739886721442426427915;
    uint256 public constant IC125_Y =
        21224222778437388734493590366107951828409809431066220074231636091906703310294;
    uint256 public constant IC126_X =
        15648294628575791711434485441764093329533759472089346645575248960574712776173;
    uint256 public constant IC126_Y =
        4713337219103331884574781204203606324916033640246435416723501533578252168128;
    uint256 public constant IC127_X =
        13365665856329006716473235460598003363386284497057334938111479935694422217716;
    uint256 public constant IC127_Y =
        17258825165654358456438088110883700270140964830493741688383101395397071765;
    uint256 public constant IC128_X =
        19035232266606435887739885682279095390272675735420388854406178708052084456828;
    uint256 public constant IC128_Y =
        2092287799033994967134426766826404928697830160900638686368740115942740571759;
    uint256 public constant IC129_X =
        5922765816540637328082144554769735010428274703975750697732810338624081831743;
    uint256 public constant IC129_Y =
        937786806250862504842804787525051916195068992510059836238017561238246170140;
    uint256 public constant IC130_X =
        11482013012250507932504143398951910823987882836892877239406661038495972577404;
    uint256 public constant IC130_Y =
        20187185725268392717404426287393146550257126952328881348222172143918704380489;
    uint256 public constant IC131_X =
        17646068874938469790589700909229100171175496418120842998014795545246679121892;
    uint256 public constant IC131_Y =
        18712205845399479311409370969488218153674391915669406027445666104235136702346;
    uint256 public constant IC132_X =
        5696865411122256577000203383190315407670905313117942919060757279215163504664;
    uint256 public constant IC132_Y =
        1162696578651396959413662288964009386564352704343028532007003952512885552570;
    uint256 public constant IC133_X =
        9281606755703227804058499194624278950469654870790945120428611667864527228616;
    uint256 public constant IC133_Y =
        9506191676097724324660083115189094230602512271148718083416048824955731119547;
    uint256 public constant IC134_X =
        17990698665988974373435358160694601489122355388123089398353108878627382077870;
    uint256 public constant IC134_Y =
        11602399590906546671063041200776053636067429569235677567687822963090997046752;
    uint256 public constant IC135_X =
        10788200133310348395953764376292490237535381048866773029262149759088499569542;
    uint256 public constant IC135_Y =
        1411960599898025362002555935381154166985897544843828150373163454419911469355;
    uint256 public constant IC136_X =
        2685382830568360790598451000424933771399828729295943422378083627096402325692;
    uint256 public constant IC136_Y =
        5551305081197709577641573687683776631355845389447446103249072395803781250873;
    uint256 public constant IC137_X =
        20138766940914297722608044096214924960391489906755049990339218257586329956741;
    uint256 public constant IC137_Y =
        15130806715009673494170471951269202826863787620048519104004384383341283653987;
    uint256 public constant IC138_X =
        6843430303886587399576357955873300403486125188924982319319608326305767851935;
    uint256 public constant IC138_Y =
        7362037084722191269430008509882638095392837441098470098789355962948001440874;
    uint256 public constant IC139_X =
        9870060891487641726868577067508885942549993553332051840255016571254992051635;
    uint256 public constant IC139_Y =
        11874426440330719891774670771589686960108877739972621628306106151095046798119;
    uint256 public constant IC140_X =
        736247400470684610749438844143169925404025743056649901187034583204088589213;
    uint256 public constant IC140_Y =
        20166948661427116159328844808568775689680443256768044189194684856653304045166;
    uint256 public constant IC141_X =
        10444164717842927085144545068662530821869830506760190631517644679237300514466;
    uint256 public constant IC141_Y =
        10351058173198050935413201821961153169710621020267507269144227711247648455314;
    uint256 public constant IC142_X =
        9214530469680316658722856923149330124095107756824345364597904826434940289200;
    uint256 public constant IC142_Y =
        7732705369516326453019818832300371224627000167272936900109544418581992584235;
    uint256 public constant IC143_X =
        4128684796805503661251385751168029497248541232334075096291387099314806631912;
    uint256 public constant IC143_Y =
        4932173699116475056050620580998436291918436561734957540846670267128718148186;
    uint256 public constant IC144_X =
        10513509819780331292408696391160874808732885045848418688778538442848599885043;
    uint256 public constant IC144_Y =
        10294439861710575909777011855101910931991951392491917025429698172839942520389;
    uint256 public constant IC145_X =
        7378365989112248671101746014098307199327623909269734230702374208320800488544;
    uint256 public constant IC145_Y =
        9332792014135203789172638687192912599660976762258125018081426684793034908174;
    uint256 public constant IC146_X =
        12265999742155757328194395093391626150492246843856266655333608931459322242322;
    uint256 public constant IC146_Y =
        754382011527686805883259799854265932624218102224909207065993452584310402746;
    uint256 public constant IC147_X =
        20118068855295088628753461550112902482310120867260878154706393937096831035790;
    uint256 public constant IC147_Y =
        15204180311174285554329521761273882633817018415226372824019538844353498448719;
    uint256 public constant IC148_X =
        5806099058757174410429139348612367862557282680501310955324082533930852750748;
    uint256 public constant IC148_Y =
        19916669282326487424292045819719401318432949144052379672415872042282161512737;
    uint256 public constant IC149_X =
        2616106887484958484226561152766527777639090436537073604738071146247514313379;
    uint256 public constant IC149_Y =
        17900850627621822949854472548231641020134028822496019137911839292461724076131;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[149] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC25_X, IC25_Y, mload(add(pubSignals_, 768)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC26_X, IC26_Y, mload(add(pubSignals_, 800)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC27_X, IC27_Y, mload(add(pubSignals_, 832)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC28_X, IC28_Y, mload(add(pubSignals_, 864)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC29_X, IC29_Y, mload(add(pubSignals_, 896)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC30_X, IC30_Y, mload(add(pubSignals_, 928)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC31_X, IC31_Y, mload(add(pubSignals_, 960)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC32_X, IC32_Y, mload(add(pubSignals_, 992)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC33_X, IC33_Y, mload(add(pubSignals_, 1024)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC34_X, IC34_Y, mload(add(pubSignals_, 1056)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC35_X, IC35_Y, mload(add(pubSignals_, 1088)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC36_X, IC36_Y, mload(add(pubSignals_, 1120)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC37_X, IC37_Y, mload(add(pubSignals_, 1152)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC38_X, IC38_Y, mload(add(pubSignals_, 1184)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC39_X, IC39_Y, mload(add(pubSignals_, 1216)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC40_X, IC40_Y, mload(add(pubSignals_, 1248)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC41_X, IC41_Y, mload(add(pubSignals_, 1280)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC42_X, IC42_Y, mload(add(pubSignals_, 1312)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC43_X, IC43_Y, mload(add(pubSignals_, 1344)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC44_X, IC44_Y, mload(add(pubSignals_, 1376)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC45_X, IC45_Y, mload(add(pubSignals_, 1408)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC46_X, IC46_Y, mload(add(pubSignals_, 1440)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC47_X, IC47_Y, mload(add(pubSignals_, 1472)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC48_X, IC48_Y, mload(add(pubSignals_, 1504)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC49_X, IC49_Y, mload(add(pubSignals_, 1536)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC50_X, IC50_Y, mload(add(pubSignals_, 1568)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC51_X, IC51_Y, mload(add(pubSignals_, 1600)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC52_X, IC52_Y, mload(add(pubSignals_, 1632)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC53_X, IC53_Y, mload(add(pubSignals_, 1664)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC54_X, IC54_Y, mload(add(pubSignals_, 1696)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC55_X, IC55_Y, mload(add(pubSignals_, 1728)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC56_X, IC56_Y, mload(add(pubSignals_, 1760)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC57_X, IC57_Y, mload(add(pubSignals_, 1792)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC58_X, IC58_Y, mload(add(pubSignals_, 1824)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC59_X, IC59_Y, mload(add(pubSignals_, 1856)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC60_X, IC60_Y, mload(add(pubSignals_, 1888)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC61_X, IC61_Y, mload(add(pubSignals_, 1920)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC62_X, IC62_Y, mload(add(pubSignals_, 1952)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC63_X, IC63_Y, mload(add(pubSignals_, 1984)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC64_X, IC64_Y, mload(add(pubSignals_, 2016)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC65_X, IC65_Y, mload(add(pubSignals_, 2048)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC66_X, IC66_Y, mload(add(pubSignals_, 2080)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC67_X, IC67_Y, mload(add(pubSignals_, 2112)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC68_X, IC68_Y, mload(add(pubSignals_, 2144)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC69_X, IC69_Y, mload(add(pubSignals_, 2176)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC70_X, IC70_Y, mload(add(pubSignals_, 2208)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC71_X, IC71_Y, mload(add(pubSignals_, 2240)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC72_X, IC72_Y, mload(add(pubSignals_, 2272)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC73_X, IC73_Y, mload(add(pubSignals_, 2304)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC74_X, IC74_Y, mload(add(pubSignals_, 2336)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC75_X, IC75_Y, mload(add(pubSignals_, 2368)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC76_X, IC76_Y, mload(add(pubSignals_, 2400)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC77_X, IC77_Y, mload(add(pubSignals_, 2432)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC78_X, IC78_Y, mload(add(pubSignals_, 2464)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC79_X, IC79_Y, mload(add(pubSignals_, 2496)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC80_X, IC80_Y, mload(add(pubSignals_, 2528)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC81_X, IC81_Y, mload(add(pubSignals_, 2560)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC82_X, IC82_Y, mload(add(pubSignals_, 2592)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC83_X, IC83_Y, mload(add(pubSignals_, 2624)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC84_X, IC84_Y, mload(add(pubSignals_, 2656)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC85_X, IC85_Y, mload(add(pubSignals_, 2688)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC86_X, IC86_Y, mload(add(pubSignals_, 2720)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC87_X, IC87_Y, mload(add(pubSignals_, 2752)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC88_X, IC88_Y, mload(add(pubSignals_, 2784)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC89_X, IC89_Y, mload(add(pubSignals_, 2816)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC90_X, IC90_Y, mload(add(pubSignals_, 2848)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC91_X, IC91_Y, mload(add(pubSignals_, 2880)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC92_X, IC92_Y, mload(add(pubSignals_, 2912)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC93_X, IC93_Y, mload(add(pubSignals_, 2944)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC94_X, IC94_Y, mload(add(pubSignals_, 2976)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC95_X, IC95_Y, mload(add(pubSignals_, 3008)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC96_X, IC96_Y, mload(add(pubSignals_, 3040)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC97_X, IC97_Y, mload(add(pubSignals_, 3072)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC98_X, IC98_Y, mload(add(pubSignals_, 3104)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC99_X, IC99_Y, mload(add(pubSignals_, 3136)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC100_X, IC100_Y, mload(add(pubSignals_, 3168)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC101_X, IC101_Y, mload(add(pubSignals_, 3200)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC102_X, IC102_Y, mload(add(pubSignals_, 3232)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC103_X, IC103_Y, mload(add(pubSignals_, 3264)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC104_X, IC104_Y, mload(add(pubSignals_, 3296)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC105_X, IC105_Y, mload(add(pubSignals_, 3328)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC106_X, IC106_Y, mload(add(pubSignals_, 3360)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC107_X, IC107_Y, mload(add(pubSignals_, 3392)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC108_X, IC108_Y, mload(add(pubSignals_, 3424)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC109_X, IC109_Y, mload(add(pubSignals_, 3456)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC110_X, IC110_Y, mload(add(pubSignals_, 3488)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC111_X, IC111_Y, mload(add(pubSignals_, 3520)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC112_X, IC112_Y, mload(add(pubSignals_, 3552)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC113_X, IC113_Y, mload(add(pubSignals_, 3584)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC114_X, IC114_Y, mload(add(pubSignals_, 3616)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC115_X, IC115_Y, mload(add(pubSignals_, 3648)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC116_X, IC116_Y, mload(add(pubSignals_, 3680)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC117_X, IC117_Y, mload(add(pubSignals_, 3712)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC118_X, IC118_Y, mload(add(pubSignals_, 3744)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC119_X, IC119_Y, mload(add(pubSignals_, 3776)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC120_X, IC120_Y, mload(add(pubSignals_, 3808)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC121_X, IC121_Y, mload(add(pubSignals_, 3840)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC122_X, IC122_Y, mload(add(pubSignals_, 3872)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC123_X, IC123_Y, mload(add(pubSignals_, 3904)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC124_X, IC124_Y, mload(add(pubSignals_, 3936)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC125_X, IC125_Y, mload(add(pubSignals_, 3968)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC126_X, IC126_Y, mload(add(pubSignals_, 4000)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC127_X, IC127_Y, mload(add(pubSignals_, 4032)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC128_X, IC128_Y, mload(add(pubSignals_, 4064)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC129_X, IC129_Y, mload(add(pubSignals_, 4096)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC130_X, IC130_Y, mload(add(pubSignals_, 4128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC131_X, IC131_Y, mload(add(pubSignals_, 4160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC132_X, IC132_Y, mload(add(pubSignals_, 4192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC133_X, IC133_Y, mload(add(pubSignals_, 4224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC134_X, IC134_Y, mload(add(pubSignals_, 4256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC135_X, IC135_Y, mload(add(pubSignals_, 4288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC136_X, IC136_Y, mload(add(pubSignals_, 4320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC137_X, IC137_Y, mload(add(pubSignals_, 4352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC138_X, IC138_Y, mload(add(pubSignals_, 4384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC139_X, IC139_Y, mload(add(pubSignals_, 4416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC140_X, IC140_Y, mload(add(pubSignals_, 4448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC141_X, IC141_Y, mload(add(pubSignals_, 4480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC142_X, IC142_Y, mload(add(pubSignals_, 4512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC143_X, IC143_Y, mload(add(pubSignals_, 4544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC144_X, IC144_Y, mload(add(pubSignals_, 4576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC145_X, IC145_Y, mload(add(pubSignals_, 4608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC146_X, IC146_Y, mload(add(pubSignals_, 4640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC147_X, IC147_Y, mload(add(pubSignals_, 4672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC148_X, IC148_Y, mload(add(pubSignals_, 4704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC149_X, IC149_Y, mload(add(pubSignals_, 4736)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 768))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 800))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 832))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 864))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 896))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 928))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 960))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 992))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1024))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1056))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1088))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1120))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1152))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1184))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1216))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1248))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1280))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1312))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1344))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1376))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1408))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1440))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1472))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1504))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1536))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1568))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1600))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1632))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1664))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1696))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1728))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1760))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1792))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1824))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1856))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1888))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1920))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1952))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1984))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2016))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2048))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2080))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2112))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2144))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2176))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2208))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2240))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2272))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2304))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2336))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2368))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2400))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2432))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2464))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2496))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2528))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2560))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2592))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2624))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2656))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2688))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2720))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2752))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2784))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2816))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2848))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2880))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2912))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2944))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2976))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3008))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3040))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3072))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3104))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3136))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3168))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3200))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3232))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3264))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3296))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3328))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3360))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3392))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3424))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3456))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3488))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3520))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3552))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3584))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3616))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3648))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3680))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3712))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3744))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3776))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3808))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3840))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3872))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3904))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3936))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 3968))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4000))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4032))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4064))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4096))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 4736))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
