// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract TransferCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        10534947708174160215201992304779041355498470735561003306499717122566742770626;
    uint256 public constant IC0_Y =
        977905257499899758791217822505228003462337033122097368830210745360601555342;
    uint256 public constant IC1_X =
        3280711512314934753992505317526746468153049821370324146752079659712174232300;
    uint256 public constant IC1_Y =
        9336028462433315123867796333994191785575550026414826950323988687234821492567;
    uint256 public constant IC2_X =
        15162904757480315297547642942646568889101029164132171480256830884259150251283;
    uint256 public constant IC2_Y =
        5543236365374398176471504758808152977042933422387633848583378303299793270756;
    uint256 public constant IC3_X =
        6084599581719503190421548874454410642759752303455385862653438619168850972257;
    uint256 public constant IC3_Y =
        18221408640134590893699663063879232072826509494821669770579541736533993832423;
    uint256 public constant IC4_X =
        13515294784299896617263177420364080405138679960108803709127908717931838641125;
    uint256 public constant IC4_Y =
        18537954088397403593567974022084871913708328503334967617431436055023979447391;
    uint256 public constant IC5_X =
        18052165982957660268255521614825223786335394780677647206458385784232406504157;
    uint256 public constant IC5_Y =
        15194585058280412021740640814141568454746627730826424655106679430538982053654;
    uint256 public constant IC6_X =
        6795673837897345581582685299965371845759418273539377917021912839836254998739;
    uint256 public constant IC6_Y =
        21657993441803516491832636271681043591945604671357149970048825080204553686618;
    uint256 public constant IC7_X =
        11289069591450532499401972724447572002376453520281915368481681110785600567292;
    uint256 public constant IC7_Y =
        11928539623033527208857415982521538988739084305734749009299860340216923817607;
    uint256 public constant IC8_X =
        21069306450658538733134282147277445263698906490240400327689099847099016892805;
    uint256 public constant IC8_Y =
        17386225215792739261329655602621235879743955668381844924635942683420074576174;
    uint256 public constant IC9_X =
        14345437456753227245495940686700720956058390526322202366808609527984033660993;
    uint256 public constant IC9_Y =
        20783457650276182735214466418096310752840639854110597710747660731724327511323;
    uint256 public constant IC10_X =
        4486441340824192164364882510367580608217147444088109552210786362403055241932;
    uint256 public constant IC10_Y =
        16553383197162304205323300390384875515644589603157855319848881923653657055218;
    uint256 public constant IC11_X =
        7299849271075286253602519481881832740498497504048928918662655218108429284825;
    uint256 public constant IC11_Y =
        21860902462897801250346538563498742432578812847135047747638191825760100188844;
    uint256 public constant IC12_X =
        20812311364493619358550828916571084941809811622004047558332288367068444292636;
    uint256 public constant IC12_Y =
        12016931719373400562450857278580603432222260403491989130190760226223433669838;
    uint256 public constant IC13_X =
        5497135883066110411842507436361453534364438777740194801977407015457789050083;
    uint256 public constant IC13_Y =
        960289848958742655061746467902157315103658957325800360115467733778920704760;
    uint256 public constant IC14_X =
        5231929274251912956972062967045818685875910122905492872577246977634648737843;
    uint256 public constant IC14_Y =
        2405680064306334170931852015314781533305421897621973941278348820986549273557;
    uint256 public constant IC15_X =
        14432423838507076163732475853088150200901869051870980078541847122928808702858;
    uint256 public constant IC15_Y =
        13162477912034036392091090217125050953003275307601447359448369192560307791075;
    uint256 public constant IC16_X =
        6035380084134788387796489655621652133939237219692536713085830198890102531157;
    uint256 public constant IC16_Y =
        2399413675745655961934247765244583346698339793807331712093749883838255391396;
    uint256 public constant IC17_X =
        1755840344064269003982904724784588829875883176859314530482477354204358128073;
    uint256 public constant IC17_Y =
        2254035658088032093438783815005800506175183609989063203400053587352866305963;
    uint256 public constant IC18_X =
        10798890848385583150817432575812471927781281538956290209396088794995757251699;
    uint256 public constant IC18_Y =
        17954866604704083608550796134404236420626288308545111154506695506614087706302;
    uint256 public constant IC19_X =
        16347505387353659907142234702135154337293088908179815677326286365566466652892;
    uint256 public constant IC19_Y =
        8145400935245335001708439352534792707071085106081878093341920760316939810339;
    uint256 public constant IC20_X =
        1675146216777597460950545026188423914140684419320163593588767283439513220964;
    uint256 public constant IC20_Y =
        3350896492191726464487860464991880712916569207980460035951208489640794805493;
    uint256 public constant IC21_X =
        14963360443843679002951981438607054782948196458205149005110445616986857962149;
    uint256 public constant IC21_Y =
        5453682123596332752358242170390357649813170313370080322693195792615766005582;
    uint256 public constant IC22_X =
        15857139261281078612816698520673496528634524033018907015066869560007114561368;
    uint256 public constant IC22_Y =
        1980632957785357477112204530352463186795117003870653324765557649080191593069;
    uint256 public constant IC23_X =
        16478788219117512612181000397725550334291930466463033672428118170129909755975;
    uint256 public constant IC23_Y =
        448496014898525130300582250347934155241571361910686004171961088395557906873;
    uint256 public constant IC24_X =
        1666825517524796314004984207461413135984918930374439646195676102947777182322;
    uint256 public constant IC24_Y =
        4231769516076965497747593863600552237823540573882692739018851158660080939768;
    uint256 public constant IC25_X =
        3076619425752586210204729303861073992338095413231945893603783564036991027253;
    uint256 public constant IC25_Y =
        18163258048301667325957382686787210971933697470347155712452125397431467657627;
    uint256 public constant IC26_X =
        12240984649194028123658663640999248201069935674255565459899301410323450592735;
    uint256 public constant IC26_Y =
        7409006959659622318645744477945350299438380296542336739366936950900796739795;
    uint256 public constant IC27_X =
        14527565647042473833164468956000362795519314198262866225352631554103417406048;
    uint256 public constant IC27_Y =
        19163038429636451765415902370901493252440686868311522712756801834049736087286;
    uint256 public constant IC28_X =
        4563064787502578607504522503795653524780441771903390561095040321594991012805;
    uint256 public constant IC28_Y =
        17132961897233615551711030277418083026528303676258815957139396120116493761491;
    uint256 public constant IC29_X =
        10825384216191058605866379876945565560465943245071973007006264312285398033060;
    uint256 public constant IC29_Y =
        21577743268709413526652653885555866375927505893806393223914213433533358336358;
    uint256 public constant IC30_X =
        6397191691971602863357148514208654665119261190406272901198661597143240375;
    uint256 public constant IC30_Y =
        19034368636483100848266322777417046441872774162624857636955426992047727086319;
    uint256 public constant IC31_X =
        13887187887323344570981409187274970320617448786085046258948210932080686653886;
    uint256 public constant IC31_Y =
        18715879836330833238341482186679228139561235361790447129420164142460558259244;
    uint256 public constant IC32_X =
        11249333327764660601508194401900817731177098928541819675032435010243826533510;
    uint256 public constant IC32_Y =
        18594519484247875970157793842670472272992161543336964034550143549078316481776;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[32] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC25_X, IC25_Y, mload(add(pubSignals_, 768)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC26_X, IC26_Y, mload(add(pubSignals_, 800)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC27_X, IC27_Y, mload(add(pubSignals_, 832)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC28_X, IC28_Y, mload(add(pubSignals_, 864)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC29_X, IC29_Y, mload(add(pubSignals_, 896)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC30_X, IC30_Y, mload(add(pubSignals_, 928)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC31_X, IC31_Y, mload(add(pubSignals_, 960)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC32_X, IC32_Y, mload(add(pubSignals_, 992)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 768))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 800))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 832))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 864))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 896))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 928))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 960))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 992))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
