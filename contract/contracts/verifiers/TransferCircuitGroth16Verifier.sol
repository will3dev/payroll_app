// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract TransferCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        4824944997804900351888512597566613914385013145768597189016468824376706173159;
    uint256 public constant IC0_Y =
        12474760785782736738749450840208447136282534753970519554641158949126754862862;
    uint256 public constant IC1_X =
        17005600035265801186579698646943240840862304038620797148879989005020882895684;
    uint256 public constant IC1_Y =
        2338550545141989422578769457928814938821390275490399007962726318380144397151;
    uint256 public constant IC2_X =
        17522920114323351476547881645687160281058402931730101980334822356923580394104;
    uint256 public constant IC2_Y =
        10719263040957170118848947969568359231159996379934300198134286588856919532425;
    uint256 public constant IC3_X =
        13178946776260184222764049068956000868899400878549343864264289739840437258420;
    uint256 public constant IC3_Y =
        2349776218492557743283297206321666553414821241660018893124919612437587209167;
    uint256 public constant IC4_X =
        12714841727697632359966849976201894800430289074760630672724901066668890916964;
    uint256 public constant IC4_Y =
        11273105188301456610525567341896201422620526683641580980778316733110993839139;
    uint256 public constant IC5_X =
        8507490859326188182526438607973741906506862179862057517929907431190440778472;
    uint256 public constant IC5_Y =
        4769872256798184471355121654943139551005043334442440955491652283782827861798;
    uint256 public constant IC6_X =
        17691655770151551023042696861221288356730389711857116876456860807225556790764;
    uint256 public constant IC6_Y =
        487282855516824620806069133679953661191468475334148095282158011863741630279;
    uint256 public constant IC7_X =
        3827109354709138677105913905372423888550915536364588202534563778962659989667;
    uint256 public constant IC7_Y =
        19603055498845409521176655568076601119020352010765059758048056480569187471560;
    uint256 public constant IC8_X =
        16476633707034043800427039579284797472345699125491257624280239399018966146138;
    uint256 public constant IC8_Y =
        5882340238294037691722650800797622872465867823437426580606057668388467279874;
    uint256 public constant IC9_X =
        10237008798106243867635862036489467118118377067098733088656036350571264014703;
    uint256 public constant IC9_Y =
        1992063048435771805582295653284950039042799973292722620964816620865917648160;
    uint256 public constant IC10_X =
        9045177346590150902116977029324819727473342545315572810505769495713207007326;
    uint256 public constant IC10_Y =
        6926915859936483500510510512228627543658273815757002359721154821638687336916;
    uint256 public constant IC11_X =
        13409263478045350781500651863893778241378065325307501583363989698423303743141;
    uint256 public constant IC11_Y =
        355109995903938981533941451829882574035069254156376672357920635409404454322;
    uint256 public constant IC12_X =
        18736129473417416244768989333470979903709500310228965664153985389793790042692;
    uint256 public constant IC12_Y =
        10138956650377744777481116885104668372479986045260591577145331626256093466494;
    uint256 public constant IC13_X =
        20643971899471591991606064187250578686336166341176059343851379520623746866853;
    uint256 public constant IC13_Y =
        3565012605067321907508043631329511445159424828505895192192467688906865648838;
    uint256 public constant IC14_X =
        15910568149354403948444023598481739928902241422254466190447533914804897944631;
    uint256 public constant IC14_Y =
        7754452926203862014449037428040710042302397986932351061617450005447989625131;
    uint256 public constant IC15_X =
        15310053792168358601597647655023328658992829987143691675868992411215021384400;
    uint256 public constant IC15_Y =
        21459755971132847287212406447112167919288085848357590982586165365661228723762;
    uint256 public constant IC16_X =
        18122031952973789351846721768401710027078024587572031502305633664896363063440;
    uint256 public constant IC16_Y =
        14193771338180143701139777462115515081728197771349926722204016259697725833881;
    uint256 public constant IC17_X =
        8617090333115737941919131912080803736437477349253306409437318190427705130745;
    uint256 public constant IC17_Y =
        1935326107356234801698421371871533710043115349831573116482119586953844426357;
    uint256 public constant IC18_X =
        2411848645393781784853726877981371370986187130761030511700533213610019906419;
    uint256 public constant IC18_Y =
        20840076249477394646714534115256574556700289428052399151068072558015126571526;
    uint256 public constant IC19_X =
        10370038499896022573533146188824074355680928834643317645510557958981566153285;
    uint256 public constant IC19_Y =
        11582168056206498162365077345491293953524421875572590296575479404886977732862;
    uint256 public constant IC20_X =
        862473372263758974954822564758215631475476540524507889900293441620695453142;
    uint256 public constant IC20_Y =
        2069014499763536290375749107771028586937258361627851536756592897223814539424;
    uint256 public constant IC21_X =
        3213629452025241568811692020692420549221731312998092307085396508527230633641;
    uint256 public constant IC21_Y =
        6183088069962565020585518804597789709746788769550425325557187552320586509094;
    uint256 public constant IC22_X =
        138627016334993369228437301043684453109361484115198097044060251996417875172;
    uint256 public constant IC22_Y =
        20697982936204918961912474819012593879524690713216464399719996805077333268096;
    uint256 public constant IC23_X =
        10324485240959449393767702523434050751006283579574314428713908073685491072716;
    uint256 public constant IC23_Y =
        6470529817451182325044263521130172171836758292901876918924551726311084317521;
    uint256 public constant IC24_X =
        17089607369944249330467768246949758390341630918978460206942503666958961255436;
    uint256 public constant IC24_Y =
        15653310060454067312291318297025831901660100223416698161969309026066097214319;
    uint256 public constant IC25_X =
        17147901368048588865655918409482324736215213225280998325148151467923691659737;
    uint256 public constant IC25_Y =
        16210005378845107968480582876618204889571249698017321605840450331376007842566;
    uint256 public constant IC26_X =
        4864952868550765902175626444847645127244979775100397747624902516880101960389;
    uint256 public constant IC26_Y =
        7827855371013260276321436175335762870830334377684510630428715092009190429960;
    uint256 public constant IC27_X =
        11839443160165415219198723445745915911582216116500725156082028297138525696952;
    uint256 public constant IC27_Y =
        12074814713453754510602170665091774624147120645453269193060712987206344460375;
    uint256 public constant IC28_X =
        19125719217325441956980619399523869057193841367416930802243716141801527501353;
    uint256 public constant IC28_Y =
        13691221826151315107883048801022761532918764155794359130434586545621057431039;
    uint256 public constant IC29_X =
        8915284245158840044735608336926263130365613065552801399818717677973807553012;
    uint256 public constant IC29_Y =
        15053977281404598294995116746132634204734198673256275448544622475669437224052;
    uint256 public constant IC30_X =
        7348488870515907744135904014479178093631606137367463508273710945554066052652;
    uint256 public constant IC30_Y =
        8638108148959695651329686632441410693489985550315339706146999131029403289054;
    uint256 public constant IC31_X =
        11938203696824968765307315052015773436741250500313719788277068228344917569031;
    uint256 public constant IC31_Y =
        9418492386778555004500160396744841856746889299144210900279727660628867003690;
    uint256 public constant IC32_X =
        21463041157276734651099432985212436691940775084693181529580134214792862588810;
    uint256 public constant IC32_Y =
        4107524933273563545199507168086646462413937233146786337396502917270894965832;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[32] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC25_X, IC25_Y, mload(add(pubSignals_, 768)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC26_X, IC26_Y, mload(add(pubSignals_, 800)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC27_X, IC27_Y, mload(add(pubSignals_, 832)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC28_X, IC28_Y, mload(add(pubSignals_, 864)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC29_X, IC29_Y, mload(add(pubSignals_, 896)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC30_X, IC30_Y, mload(add(pubSignals_, 928)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC31_X, IC31_Y, mload(add(pubSignals_, 960)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC32_X, IC32_Y, mload(add(pubSignals_, 992)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 768))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 800))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 832))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 864))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 896))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 928))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 960))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 992))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
