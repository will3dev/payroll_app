// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Groth16Verifier {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 21174628316649879455347143963552205055472916043448208953951928657627100110075;
    uint256 constant alphay  = 5178925959825297933760723970624224218221972124859740964067049371005208221377;
    uint256 constant betax1  = 13324869245893908120816289272564040705850533582460424248463770136125503293317;
    uint256 constant betax2  = 2284350401114457269390436758394081117074435609917115995346479229937263173689;
    uint256 constant betay1  = 7281834411921425623840558438719061300120057339899142512113395831553799057501;
    uint256 constant betay2  = 13203261050527504927017272059831294018366300110949328980714348779101077837117;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;

    
    uint256 constant IC0x = 9843501343960633361410916176958237759607864497201732044072981531760077074379;
    uint256 constant IC0y = 13516834998811844578031353963479136840463463254464037228515088975508800571057;
    
    uint256 constant IC1x = 13630211023220766125359359042512230516083639996157962671948571759087008948934;
    uint256 constant IC1y = 1573336700564032652333154128455796361814642570324181112896696722336567391955;
    
    uint256 constant IC2x = 9466688050442960435161133268556160011762088949346299266074479341729937621794;
    uint256 constant IC2y = 11304684266784659596435326466953447287841070013251767590323919228844908993848;
    
    uint256 constant IC3x = 19755076866545638545579157822127819806233472380350930283179785620882711256233;
    uint256 constant IC3y = 12041414161600118452670737915543410804519177812592095031190992139691566218809;
    
    uint256 constant IC4x = 14409633948549483354855162916797304785565228228228733578959359008723722539579;
    uint256 constant IC4y = 21153650314303182335610798625169362805048548404305698673656255066246207485858;
    
    uint256 constant IC5x = 18233716254293265189253195669228368941929029588086738023333365296544407113339;
    uint256 constant IC5y = 10828798899152910161977101109100401704833731217205152012794448664001614056801;
    
    uint256 constant IC6x = 13766623193394440752882432084372226272353889095389547076489488708720254749282;
    uint256 constant IC6y = 9027801170699999225469313705051116388923096447592291319977981643673705647635;
    
    uint256 constant IC7x = 16767607359456206498683840319606630513879875492538648026851701214203292128474;
    uint256 constant IC7y = 18638338712967772699202627303041437873479190491545510806566877780853756452142;
    
    uint256 constant IC8x = 21401862489098779478281496135735632609827039984009862116767768925943961925073;
    uint256 constant IC8y = 9153956007835262030050594432604413170393628160800917025945288688296763088775;
    
    uint256 constant IC9x = 20185720765931932713374640623834470362974699253206137844753369023452238590302;
    uint256 constant IC9y = 18804302932800494732255863262783987877909315326657644094722338593623801339850;
    
    uint256 constant IC10x = 9856703042708352762244583303363744772867732732638264881417606517108097412187;
    uint256 constant IC10y = 7381030705855749567802094858385168641246114434237050011332200674857071487698;
    
    uint256 constant IC11x = 11150705860628710363427380961406405589810988211158669537442990483147747193567;
    uint256 constant IC11y = 12014517380450335860545381708979934534105067958957377611595755721609966609076;
    
    uint256 constant IC12x = 12169767880991666323524904542117802835886851482350180950653224016076542442988;
    uint256 constant IC12y = 16987899372948337800818327896488074119744982366338624396803893469947254086306;
    
    uint256 constant IC13x = 1666056119954820665852802808906918277238594784026926912645214004893074905780;
    uint256 constant IC13y = 11253942252772355531517268769670117020260720352296032774462530949318135416557;
    
    uint256 constant IC14x = 12897923868775862446033844421204552583848971081461159915706844418833500169337;
    uint256 constant IC14y = 17216644219582120950276300327259797546594954513916417975210020984561090339854;
    
    uint256 constant IC15x = 12907065703542602990152982623425078309459281868371604727822955021425534334218;
    uint256 constant IC15y = 19153356260007917730227381063729073970477953024342662176124628399976023201042;
    
    uint256 constant IC16x = 19684556872270486033276018069827732735980720431140502326551646893112708304317;
    uint256 constant IC16y = 2001619619283909369787362583747564280254333091413124887643080839441491180741;
    
    uint256 constant IC17x = 12584854653900843384119121049112176663460152168136388309818244313024107233555;
    uint256 constant IC17y = 11147610810726679423956212273500250154832496064329373430251019511567757550814;
    
    uint256 constant IC18x = 4018116527040628477137572870763235959738609759193781807439094597880428609723;
    uint256 constant IC18y = 21332429457666702897521774570792318927761401084765064348624398442405568805708;
    
    uint256 constant IC19x = 6479501021289522215940970684881076082762139875088290503441926995128377098439;
    uint256 constant IC19y = 20199620341314035067947223264831612319454955008756490977849290226061547014620;
    
    uint256 constant IC20x = 18450390861998495046626836576873884035949083647026884591158453958004950997846;
    uint256 constant IC20y = 21854268874488809243096644398794204730808644968150519575510471443730239247745;
    
    uint256 constant IC21x = 19832741379552879556537897510838944738030376281973045083542239909770389847053;
    uint256 constant IC21y = 1502289517795127101449792475100483482187815053471636176433905259069814588966;
    
    uint256 constant IC22x = 18905032917209944933244849738473391139512543216879635381956064398674067561957;
    uint256 constant IC22y = 1450901559921536687934796247150835561659704991848182356437219242659147075441;
    
    uint256 constant IC23x = 7241660300703896262493771287532610002771364580817912625006327917864969642030;
    uint256 constant IC23y = 16765337300640568604951780654658101956174555402014904461844320135639592080987;
    
    uint256 constant IC24x = 6508947352025920040408951148999553428685431419047772749269000241297057710966;
    uint256 constant IC24y = 1866585552043887670904678517122076587882138746529319885828980813931510301203;
    
    uint256 constant IC25x = 16100932275169538169923453693819224523993591841624256890948125235757700956269;
    uint256 constant IC25y = 1464258777538089717230667650767532978377412721462199708597849837219701406402;
    
    uint256 constant IC26x = 13445348278438994904046549392461509323775893999388707654929695007224139590573;
    uint256 constant IC26y = 8877626006782939287231937604223156946522808916970934779518231720882202600454;
    
    uint256 constant IC27x = 5947136898095687540372676987415397959735100777880059919488804755475873395781;
    uint256 constant IC27y = 14420802382361813118645319303705076574323336939715058649710155952237123134465;
    
    uint256 constant IC28x = 1693159965294676517250244241446881885368486272642134975719569110882774763503;
    uint256 constant IC28y = 8818199034914666750040169460137346343690439199219213480276242293015666865400;
    
    uint256 constant IC29x = 1838266510744779249078142294983956056382299355127938654126052972313785673594;
    uint256 constant IC29y = 16659663497855300902979546876597045820904140704051789129450078800791902188118;
    
    uint256 constant IC30x = 8669124713234784237433826770857861442774643834490431353128231027934432501739;
    uint256 constant IC30y = 9924202285466408426086986694728167597037942248605694838892701903458063228594;
    
    uint256 constant IC31x = 15919250383843305292764999561327324493766393505074119449077327266008464040644;
    uint256 constant IC31y = 4137702705415854266976398658845495213625231688337625763326233100518716284240;
    
    uint256 constant IC32x = 8843766679179737586012798744021769330273980351592219719154991744853240686839;
    uint256 constant IC32y = 15061820925804889035851015850067665534946963482685010738737228596849189036177;
    
    uint256 constant IC33x = 3708835092835225612390120109767066059275487342832391596096293850549205042292;
    uint256 constant IC33y = 4070896391456318326245025984611894927681690985223567519846824853104696316659;
    
    uint256 constant IC34x = 2917594743510973909334685552120851612671623620158538006150529191772264726355;
    uint256 constant IC34y = 4109753367322114070121818771405412510257314852877061240231931047706210834812;
    
    uint256 constant IC35x = 13727715936914660920345194427636571812942515055949254164318894921096891305576;
    uint256 constant IC35y = 14739894862314244313822267858840994735081841802149336861613150810720906602983;
    
    uint256 constant IC36x = 16821110788769824336641171157454062735927006912714335438864517572077593536038;
    uint256 constant IC36y = 17936263644783446924592946504102146318260546444026930674407256860312822405065;
    
    uint256 constant IC37x = 4697849710856999990914554006561410311253237463577229632753569677228388388329;
    uint256 constant IC37y = 13351219630719686144966819644374681246011146607537052108759948616295869703788;
    
    uint256 constant IC38x = 16868032976915070077703857371633764151740434985387168130120852076192672386572;
    uint256 constant IC38y = 13767574264022198085621133758975006969505769260200482187299816865112825964681;
    
    uint256 constant IC39x = 1325447493282734962749050319148809047507610396589299864196887046008007516308;
    uint256 constant IC39y = 6993962006470475697436707000827741545227721599087401411796215819666742490965;
    
    uint256 constant IC40x = 13868323093298641427065764144517240828023468807734708351238466585122288577582;
    uint256 constant IC40y = 21180014483944779034241786693765861008741593469295302844994165560503234729246;
    
    uint256 constant IC41x = 14347596393042468531064696092649393228179480854145569650766830281574619005580;
    uint256 constant IC41y = 13736851333524651634161748219315078727515219763206772307527315880033968289107;
    
    uint256 constant IC42x = 14567343449965967532181066984193773751300967360544649920089453585644719988387;
    uint256 constant IC42y = 9643855412678100937939932717688078679579811127016911189771997514068580037017;
    
    uint256 constant IC43x = 15771369981376568621680331032975014388421635473581953419441033396609257513194;
    uint256 constant IC43y = 18283105643982265503125842975596827155168206257849385801512579005806290622793;
    
    uint256 constant IC44x = 21287905628828925862330545934278716119254781336666088742563157052880710649735;
    uint256 constant IC44y = 19592824145478540112820201653695596924318295514381651681132203210000150494161;
    
    uint256 constant IC45x = 20008885653224116829086718327615588770432440167645346852502809717968799437444;
    uint256 constant IC45y = 6385465983776630455493200234622639733789099511373749827675015996668326707309;
    
    uint256 constant IC46x = 7656482202078682965355305784580683144575951997036431741429999138928994696080;
    uint256 constant IC46y = 4188443370418088984179272984272894010701075182400008819968140651053322295396;
    
    uint256 constant IC47x = 13535381407045476274204998328878875659433743556791449843469117065560617377156;
    uint256 constant IC47y = 18522963646925451022749455968084965784520686052184069470346923080035733186853;
    
    uint256 constant IC48x = 5203696133178679918485367991729822553889802420389770756095854810322522413797;
    uint256 constant IC48y = 2342607602638921755419661552313825161062799987258751098524699787239965697855;
    
    uint256 constant IC49x = 5210008666685542251356446953657552900447833982164358355997101949534066508220;
    uint256 constant IC49y = 16995656373186774441619064752265950786726538877164177423628269292334481169877;
    
    uint256 constant IC50x = 17482740139503546886571365006120413232174535051425428554444590703778173401314;
    uint256 constant IC50y = 18852290208677126863894201018189305397688212790982450708208689045763938740242;
    
    uint256 constant IC51x = 11908519462534946218071221413700187527224224782353949512022138185712867907542;
    uint256 constant IC51y = 17647857227245353483785629862817666523572357392019229185697791079008196933077;
    
    uint256 constant IC52x = 4595786906536383917152138652996733635246345552041201448694120901289356743112;
    uint256 constant IC52y = 15888941792220420830291936621471886152226054271605058696725271637487036849176;
    
    uint256 constant IC53x = 3233764530831851453304960482359991457166606007535780139715733051575457796947;
    uint256 constant IC53y = 18477124855920734654198587413718177197123749572638906826475321731161242193528;
    
    uint256 constant IC54x = 15802090781084848419272997172808345927047065951341554519399985727123313588775;
    uint256 constant IC54y = 9561101345687739140511136616072594401784653722735443179951066171440941979070;
    
    uint256 constant IC55x = 16876566012530491955663141963315383545394014366039848973627141548644521196665;
    uint256 constant IC55y = 19910294584774329859397649078429026314593376192348161108782216136788063793808;
    
    uint256 constant IC56x = 16306349067705778823833167862012611295162730167247833522848882717034023471513;
    uint256 constant IC56y = 14586230709904430825856112941188295011953927060519756505161541923001836705604;
    
    uint256 constant IC57x = 2016153429630715086858101776387455220154480801582176752951374400256466429267;
    uint256 constant IC57y = 19871569311478543861098360693965897925592356717601255446218806247174418056332;
    
    uint256 constant IC58x = 14762560757202919661256746586769236390583335364553301871154919128579545612111;
    uint256 constant IC58y = 10933228677629792595269727184837370627613042779422805012710452826648158122807;
    
    uint256 constant IC59x = 20317448323574251260889985470672174411434411737051572760441363077202263552890;
    uint256 constant IC59y = 9577333863416596176405013240753534707010354648236029452542436225011473054432;
    
    uint256 constant IC60x = 4869605193940933852675892491625419190717059004107506362165301962752897044227;
    uint256 constant IC60y = 15582891501951259518417260389753591644067785948063592658588663113548081064024;
    
    uint256 constant IC61x = 11688692083972553838784911521589970073927538734664532924290718516874666416624;
    uint256 constant IC61y = 9271116586922706471045062382105136144925812662523077973915456371154576605952;
    
    uint256 constant IC62x = 1932018082270588675735704271758216046709659077071061117494605792381574380788;
    uint256 constant IC62y = 6274789225626668263600513973297144353032621497085328910714360420276054548877;
    
    uint256 constant IC63x = 13204944655075567394543475733803135598258572234611213709099900806008657954951;
    uint256 constant IC63y = 18630136332101108828334031332922280443927006194369036537095698652391977848256;
    
    uint256 constant IC64x = 10941561681714782897046720367359391228045899524066423510389404593607727968539;
    uint256 constant IC64y = 14635498109941551874850833183766767678639404274665852857559598938236819554838;
    
    uint256 constant IC65x = 3805384310098358631839959234793113415135419776141986316180321129240840145526;
    uint256 constant IC65y = 18509884256023578314387528346228072477153297150767353988243308972394496258661;
    
    uint256 constant IC66x = 5556627225497004795648762138521692183069648696772885481866630355246401228749;
    uint256 constant IC66y = 14227524358594998237433349157456554309930981977649243364139657957068134105662;
    
    uint256 constant IC67x = 5684479932431046685750057585289455165731192203249588797854743902945306791146;
    uint256 constant IC67y = 8933971371615744753976870618072291928830396463807177153610276694836838398734;
    
    uint256 constant IC68x = 20434094770643425751855141926743221192772837286542779578243259056621653983656;
    uint256 constant IC68y = 13155728761459993124557096688257433146880384864116950740587099646320112789565;
    
    uint256 constant IC69x = 12840573327053132269452260890198404867602626637348984572061473495493864280160;
    uint256 constant IC69y = 9400772199646909662330193185449492047737549149997452549150218955313000485385;
    
    uint256 constant IC70x = 10262560151804303111579361545244202282662793940401053065271056469976141842731;
    uint256 constant IC70y = 21443681348234911552285444392438030579011731556680304959254693737888801060281;
    
    uint256 constant IC71x = 1798283653139490513217252684020066299598385097254090994455171592941054567072;
    uint256 constant IC71y = 19579714560676653229956329596597386088930824066557107656525435446324624210914;
    
    uint256 constant IC72x = 19725356975616085453461827017091823079571731621199430808750910626085856534463;
    uint256 constant IC72y = 4249629951744558877944443627797665968431010199458439592972072011590783412841;
    
    uint256 constant IC73x = 6361170573766919863764445443565531518736011591311356099310515811805950752429;
    uint256 constant IC73y = 18817135258876593567879457522142628117983966342828126994174448933033530862592;
    
    uint256 constant IC74x = 7958097384183073706945535565905202230080996811156114740727507771451453203214;
    uint256 constant IC74y = 18037497903418147239711341822330336201125628398024127375158118070662784644990;
    
    uint256 constant IC75x = 4397600216361586605604722907350469251811580115345046751182109928167194950539;
    uint256 constant IC75y = 21196693203048491738839914007676477161304932934298971298158301501336422525562;
    
    uint256 constant IC76x = 9355759708328714424970113250404231873717620860343580841508922588929349396391;
    uint256 constant IC76y = 8914205603790581171838718185970392437561182588813512524267847150447914656479;
    
    uint256 constant IC77x = 5058237804189656608841580979795592576346875612333543125929740051189773026265;
    uint256 constant IC77y = 12168895051429112215093862771267553739883031888038554275788465970009596445936;
    
    uint256 constant IC78x = 19496886421246188077304926411900150951992134619522311172584357388105348844439;
    uint256 constant IC78y = 9723148428165741979769869154981184279697804614749880826093865473603463044628;
    
    uint256 constant IC79x = 11394965702721882368559284882888269553730223393657396063711593339357907238566;
    uint256 constant IC79y = 7295157859203412752596194217378384270934282822663912368747720795821053532926;
    
    uint256 constant IC80x = 20777102890049917503051877021046694547349933971852838368913165219688560624091;
    uint256 constant IC80y = 15327950948598860148666046039772998006872439801793315342724465644141945300620;
    
    uint256 constant IC81x = 21031905538034175554899763454011176210886781856912524341789366274050609863462;
    uint256 constant IC81y = 209509603045921808420957324851384468339170675063808122076163899741205859;
    
    uint256 constant IC82x = 18286536874451507832440637416376551292634603912336016828793538620387000358070;
    uint256 constant IC82y = 13908626478521362927903749789919952287308389452494104746085475701244449973724;
    
    uint256 constant IC83x = 6933516280938948635737345990476678358797538547104614835395787321080408962200;
    uint256 constant IC83y = 13726160841354880138037732570926741509072578934430472291711417979635902578030;
    
    uint256 constant IC84x = 13589124654452820025856383051454820895629713577979607118137412879613373111020;
    uint256 constant IC84y = 689392983830912965134452719503156884392943495830407494199086661434479892268;
    
    uint256 constant IC85x = 1007624009544200225224615279655565509247128024209486347077183451672853860328;
    uint256 constant IC85y = 12796827965594898335971750388803963137075222955298025448939614513606654135716;
    
    uint256 constant IC86x = 2804847125019422844968321279976517559036957382658943321696111923692965115701;
    uint256 constant IC86y = 20248309176763875580378946348173123501389944638085626742999429241827463354860;
    
    uint256 constant IC87x = 21581632412360209749845297915894966619898870903171979269437406602492848916788;
    uint256 constant IC87y = 14968052764417577076696673558160278945971619859657989582590503613274370606137;
    
    uint256 constant IC88x = 15827884600994300223480145279923440792117561226657489676645966306748307406373;
    uint256 constant IC88y = 20369394532079950124697234070214663498206125550661190015312871984972564856817;
    
    uint256 constant IC89x = 4327847993347617943206755336521200214201317467670414993372136771669787643192;
    uint256 constant IC89y = 10295466710044652559869882099783829274012735085538291669951294499254412758257;
    
    uint256 constant IC90x = 3322418122379847895213110384450793358849740112628071707546152221862375284710;
    uint256 constant IC90y = 5073420203228809057804883413724078867895074777981044422987654986076350706292;
    
    uint256 constant IC91x = 1874835584854291895001949636153230830643923635026951452128789034790325420824;
    uint256 constant IC91y = 20721484924207067165104528065160025872777413856813813043830601354325580173863;
    
    uint256 constant IC92x = 16341678244926215830503760373928806998549613934711360661769405355432156900890;
    uint256 constant IC92y = 16247995322615905826863582376193142343742331306918805436057566431264689973471;
    
    uint256 constant IC93x = 3653713790978930820048906101075141048564627608685626566113936896246286916601;
    uint256 constant IC93y = 4064028261452850337053138092652884474459718883435202717520277185923052137929;
    
    uint256 constant IC94x = 7716063264528616720897336495822141705738191449494597008034441269717855366444;
    uint256 constant IC94y = 20484856602867254371002121391541390888758685506475517726507661223581533559182;
    
    uint256 constant IC95x = 6153019049225578249899242206644227801032321065154333140068933645702368915811;
    uint256 constant IC95y = 8284236684963001374360939372951996449814328444479236602184934316087809023921;
    
    uint256 constant IC96x = 3277963331954712396990293742539196171434417250817006497281949050161246225702;
    uint256 constant IC96y = 17896943357486034681806615514711238851786211352470017181568951482855686365903;
    
    uint256 constant IC97x = 490223568010712259134760944027681030801965162671125326643791911647019144300;
    uint256 constant IC97y = 10862866116799504654150292182298293807917625686963088453004282347647647322552;
    
    uint256 constant IC98x = 17605289337883965184995667012507579363045752049108632375014325655907192046936;
    uint256 constant IC98y = 19141461357667970835771416003702710163028999798241804268614047417051312151328;
    
    uint256 constant IC99x = 2418474178160140471348935989802171807476170311895254246653137773654504727033;
    uint256 constant IC99y = 14686146853610407296362600490643344956910558031756956092180725274766872813020;
    
    uint256 constant IC100x = 298132958872291554235447817640715110473019156886197998266480328888935422063;
    uint256 constant IC100y = 1209168914384754091737816301663765944922761112487872957569901785694416188130;
    
    uint256 constant IC101x = 17607495620799594888045618957277800334769936215734007569176919603189709263680;
    uint256 constant IC101y = 19202487301639938982953496578421592948542203478139092211750734872813120259437;
    
    uint256 constant IC102x = 16234275632798463969382028071970991143947031297598404313273144950217549951369;
    uint256 constant IC102y = 17372093002169354396969183200940584110439138734480490171520696041901545983612;
    
    uint256 constant IC103x = 10938745024447190578081328848294869388817905884074101060665390653125661533318;
    uint256 constant IC103y = 6705537179590779857778764337879329443037825803059826149151476340262295878434;
    
    uint256 constant IC104x = 18191902747874305114139752936552188864257828727644627095281263348046588402427;
    uint256 constant IC104y = 18295109091670249108103231275926586900665044029563270584435845568751425379600;
    
    uint256 constant IC105x = 17338614896377933926746858001984631611153240356350121047388544238873540936230;
    uint256 constant IC105y = 20012654386507523329656022039335949360405213891020673265160411193350354406354;
    
    uint256 constant IC106x = 13236325653433168258344024509189615857749636208241912423663171108056487019685;
    uint256 constant IC106y = 11243859773813295636053281883157850994721109250500364257882917224170595769436;
    
    uint256 constant IC107x = 6639248187171072717028560085183448854048375557684461480265767870398566626498;
    uint256 constant IC107y = 17837749211353736921407651523247242748134142411835798552160271053213476837032;
    
    uint256 constant IC108x = 6710793550373569608053663537066252650293233512056032549698060271032542582047;
    uint256 constant IC108y = 19053592751555690451559239860223111388049727205540735005219773475458318631262;
    
    uint256 constant IC109x = 15550842890608473274113617386555805392687986009253043629039301298198650214481;
    uint256 constant IC109y = 19092249867897511913046338731989535655094492439257719184007806660647900885204;
    
    uint256 constant IC110x = 2720411320114259747791290955870036501030712314007812930855881693915767834740;
    uint256 constant IC110y = 11263324661744091307789937084114389035175948569957215059281510466493650852468;
    
    uint256 constant IC111x = 20793959098884483284640727877003735144553277303571186209513955137665271205079;
    uint256 constant IC111y = 1582708453696095057306293066635956364120049303604542098184521620481986669451;
    
    uint256 constant IC112x = 7564317648352415467659845967032533235037344922328938367871560683992366423427;
    uint256 constant IC112y = 1557048581468752037180129572979975594470837681637534522260628137086440267416;
    
    uint256 constant IC113x = 14159503644513455802056914902912361087992494014077551029135193457926658386141;
    uint256 constant IC113y = 11852915380030012094296806161979825121005191441927878152953772297909612839371;
    
    uint256 constant IC114x = 6698645905395676743041023133599473196758313487276380307336509206988835212595;
    uint256 constant IC114y = 18366697788749938396937915496398128423671486196053510930262336679890249091133;
    
    uint256 constant IC115x = 19208581615654380534754572569463983110637160854817532004486666416867723347420;
    uint256 constant IC115y = 18602252576323290464164304262920652496336111300287459672795637588355726877709;
    
    uint256 constant IC116x = 14591805697288226381371163391723687173393852038354655668285454996414755180375;
    uint256 constant IC116y = 1679631693289835797090646770462327341171459889830948494508525577589241320867;
    
    uint256 constant IC117x = 10761033174469344490845100040291748680754128858841558260045238737190269819436;
    uint256 constant IC117y = 8389709047611214636610658768067982756764909867069792078002771053693453622536;
    
    uint256 constant IC118x = 19582371911798973000618967386821696493678721047850117314532553104313255374567;
    uint256 constant IC118y = 15641472714498810971709789131174712010356001328526655281558028164506658317195;
    
    uint256 constant IC119x = 1322296291552936957248243438065568867393071779548416339078273091534039955242;
    uint256 constant IC119y = 8209088268241178994403297790337586570511528695776060929779493261654408450841;
    
    uint256 constant IC120x = 13876959764733965945283217820477160408374918474158761867714076565611841260700;
    uint256 constant IC120y = 16109058814012149143011419729006282153002471470641742336699816230734696526000;
    
    uint256 constant IC121x = 10138035788549659321867129155162010566986363731937098206340120493979397387336;
    uint256 constant IC121y = 4585880549311489624421005537152019504464190973854709429538091343590457376644;
    
    uint256 constant IC122x = 17085269079469011720993245247861825366185626299002508390850104283251931987733;
    uint256 constant IC122y = 16702898053983800227251044790731392754755062496129190368489355456318080934416;
    
    uint256 constant IC123x = 13403065461212538516706096876996049592930815458984262476080092019015534130172;
    uint256 constant IC123y = 20253266832407486505803165857715325940278380916825590863565945782073079158235;
    
    uint256 constant IC124x = 3503919824798172446088300176496526875674893821398855620088099314206367095369;
    uint256 constant IC124y = 3706048290317998268862239759249345730998484554772680939250499590962822226557;
    
    uint256 constant IC125x = 12644495520487005504311949990656259353600973557495305913992493753096158097200;
    uint256 constant IC125y = 8907868248752360961611805257745668156567525880407145939993556796467077627280;
    
    uint256 constant IC126x = 5564270030721131575445130363880977815658206104353599172801557936266661616501;
    uint256 constant IC126y = 6966745312471980250093461274142131669267906564885471407057577939216717950805;
    
    uint256 constant IC127x = 21620339347296365777810876862594321480955795475753601342983322319206755539505;
    uint256 constant IC127y = 13320591600517673325721769997892996213552267064322902395863081683574847791215;
    
    uint256 constant IC128x = 1819327234347302266563103720789351683166564189744828101454111824979856233871;
    uint256 constant IC128y = 20898494324073648443683239600790257704626601188762396789493563276847545224650;
    
    uint256 constant IC129x = 14166707598302488529869301191971533689117199003900923498415705067145538170662;
    uint256 constant IC129y = 8057310231456393540333962896775788170029632613923506552988063906903658403031;
    
    uint256 constant IC130x = 18050351026348113022821932012685459410670647608489257564257891812202766141500;
    uint256 constant IC130y = 7901379113314209752216157058615694048817488783635094649206860717688883195882;
    
    uint256 constant IC131x = 9859723853741172763537802368152026776806745188190288382952174492767272884120;
    uint256 constant IC131y = 20640023845391044932913729050247088905021528400620281000852565888646429893058;
    
    uint256 constant IC132x = 1666170640138852317187497483736419826910592404960410621516822584791911609624;
    uint256 constant IC132y = 17941056432256997804428574742263452486976503844873938099029941319855944825479;
    
    uint256 constant IC133x = 6891681504978633873682277206538458664438599865252540947142526206897657670088;
    uint256 constant IC133y = 4074276648442337588911320982815614383115566245602562977984275617155613127924;
    
    uint256 constant IC134x = 9725024281727389928583716090464830878560362760592782498762871714260642220771;
    uint256 constant IC134y = 2698953594306610587543502965245219126796810903359239123204673890620634593983;
    
    uint256 constant IC135x = 5321943027030290256441714537852047134304342591848240863980342361414780244506;
    uint256 constant IC135y = 16877826845418602326507879606869634675330978569293949454161234763790970859715;
    
    uint256 constant IC136x = 14784661965150897074792032238345157117665620348524295770525933848251471874979;
    uint256 constant IC136y = 5045942961844391721063930622540956744643151898005596801829979270504477321712;
    
    uint256 constant IC137x = 7247227176644906576336370851200333844900564261015080208661192026766340171296;
    uint256 constant IC137y = 4222934407732228151716933248563642420814473888354229570739253888632323926737;
    
    uint256 constant IC138x = 6040919641782522373206291746259139927526275673000956105715936046461576224844;
    uint256 constant IC138y = 8891379083820532789002052514052487393915001130934889353841306615284793144968;
    
    uint256 constant IC139x = 17113804837919168613345735402232558107350836619978148456099769353995634416566;
    uint256 constant IC139y = 13627705728692486170352013184812318716706876168626022667033342360656653293857;
    
    uint256 constant IC140x = 3103242193295009986645041055105149377082868726589014367691866842147673143333;
    uint256 constant IC140y = 304852852149910611687154473624998475747742426474661321878345084526120021951;
    
    uint256 constant IC141x = 1291391605194996825917274369911922737447975813569930759230998028238560656971;
    uint256 constant IC141y = 447904685621508726637525823777259606533092665805122369214067828231558918267;
    
    uint256 constant IC142x = 19513121643014102095862445803847246278161853849339481616793397142537581189943;
    uint256 constant IC142y = 20459749501841463461424230101947489571224161912721972340859838424980815617722;
    
    uint256 constant IC143x = 19251947640497997880248765152447725018441673333102883795071439384126036034327;
    uint256 constant IC143y = 917693142863140628761357124323948074610416082300674194703791658270124605044;
    
    uint256 constant IC144x = 7295331378868688620143904949205502421721359058835354049023066985586364051577;
    uint256 constant IC144y = 12538174398358760233539098145366213592235254622664929171779026770781745200901;
    
    uint256 constant IC145x = 11978954598212016014881055821766779036313380596749526583225037345457433113315;
    uint256 constant IC145y = 13726206719493407205708291422304589438998664791247719300919002619140430836372;
    
    uint256 constant IC146x = 6251428350933960510151608533509837168184940621026255417264562661423713533762;
    uint256 constant IC146y = 4540983445292126654808171888611201201143895162082647693886646205443027852910;
    
    uint256 constant IC147x = 15899056516810403411251966420325514611372420542836451198624508127971241526618;
    uint256 constant IC147y = 977335258962570997834172884317528024419695966878676565965905954804663632661;
    
    uint256 constant IC148x = 305117663565359898256653656835888792532865008383631581280649639993962344807;
    uint256 constant IC148y = 6474316698643520276812899323605906471796958696294336840666681240493273359594;
    
    uint256 constant IC149x = 11571985542212652715808745597829386324519380300424652159939655029114221450257;
    uint256 constant IC149y = 12995462852580220205768956595039155237353770762063655779075021244142033560820;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] memory _pA, uint[2][2] memory _pB, uint[2] memory _pC, uint[149] memory _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, r)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                
                g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))
                
                g1_mulAccC(_pVk, IC102x, IC102y, calldataload(add(pubSignals, 3232)))
                
                g1_mulAccC(_pVk, IC103x, IC103y, calldataload(add(pubSignals, 3264)))
                
                g1_mulAccC(_pVk, IC104x, IC104y, calldataload(add(pubSignals, 3296)))
                
                g1_mulAccC(_pVk, IC105x, IC105y, calldataload(add(pubSignals, 3328)))
                
                g1_mulAccC(_pVk, IC106x, IC106y, calldataload(add(pubSignals, 3360)))
                
                g1_mulAccC(_pVk, IC107x, IC107y, calldataload(add(pubSignals, 3392)))
                
                g1_mulAccC(_pVk, IC108x, IC108y, calldataload(add(pubSignals, 3424)))
                
                g1_mulAccC(_pVk, IC109x, IC109y, calldataload(add(pubSignals, 3456)))
                
                g1_mulAccC(_pVk, IC110x, IC110y, calldataload(add(pubSignals, 3488)))
                
                g1_mulAccC(_pVk, IC111x, IC111y, calldataload(add(pubSignals, 3520)))
                
                g1_mulAccC(_pVk, IC112x, IC112y, calldataload(add(pubSignals, 3552)))
                
                g1_mulAccC(_pVk, IC113x, IC113y, calldataload(add(pubSignals, 3584)))
                
                g1_mulAccC(_pVk, IC114x, IC114y, calldataload(add(pubSignals, 3616)))
                
                g1_mulAccC(_pVk, IC115x, IC115y, calldataload(add(pubSignals, 3648)))
                
                g1_mulAccC(_pVk, IC116x, IC116y, calldataload(add(pubSignals, 3680)))
                
                g1_mulAccC(_pVk, IC117x, IC117y, calldataload(add(pubSignals, 3712)))
                
                g1_mulAccC(_pVk, IC118x, IC118y, calldataload(add(pubSignals, 3744)))
                
                g1_mulAccC(_pVk, IC119x, IC119y, calldataload(add(pubSignals, 3776)))
                
                g1_mulAccC(_pVk, IC120x, IC120y, calldataload(add(pubSignals, 3808)))
                
                g1_mulAccC(_pVk, IC121x, IC121y, calldataload(add(pubSignals, 3840)))
                
                g1_mulAccC(_pVk, IC122x, IC122y, calldataload(add(pubSignals, 3872)))
                
                g1_mulAccC(_pVk, IC123x, IC123y, calldataload(add(pubSignals, 3904)))
                
                g1_mulAccC(_pVk, IC124x, IC124y, calldataload(add(pubSignals, 3936)))
                
                g1_mulAccC(_pVk, IC125x, IC125y, calldataload(add(pubSignals, 3968)))
                
                g1_mulAccC(_pVk, IC126x, IC126y, calldataload(add(pubSignals, 4000)))
                
                g1_mulAccC(_pVk, IC127x, IC127y, calldataload(add(pubSignals, 4032)))
                
                g1_mulAccC(_pVk, IC128x, IC128y, calldataload(add(pubSignals, 4064)))
                
                g1_mulAccC(_pVk, IC129x, IC129y, calldataload(add(pubSignals, 4096)))
                
                g1_mulAccC(_pVk, IC130x, IC130y, calldataload(add(pubSignals, 4128)))
                
                g1_mulAccC(_pVk, IC131x, IC131y, calldataload(add(pubSignals, 4160)))
                
                g1_mulAccC(_pVk, IC132x, IC132y, calldataload(add(pubSignals, 4192)))
                
                g1_mulAccC(_pVk, IC133x, IC133y, calldataload(add(pubSignals, 4224)))
                
                g1_mulAccC(_pVk, IC134x, IC134y, calldataload(add(pubSignals, 4256)))
                
                g1_mulAccC(_pVk, IC135x, IC135y, calldataload(add(pubSignals, 4288)))
                
                g1_mulAccC(_pVk, IC136x, IC136y, calldataload(add(pubSignals, 4320)))
                
                g1_mulAccC(_pVk, IC137x, IC137y, calldataload(add(pubSignals, 4352)))
                
                g1_mulAccC(_pVk, IC138x, IC138y, calldataload(add(pubSignals, 4384)))
                
                g1_mulAccC(_pVk, IC139x, IC139y, calldataload(add(pubSignals, 4416)))
                
                g1_mulAccC(_pVk, IC140x, IC140y, calldataload(add(pubSignals, 4448)))
                
                g1_mulAccC(_pVk, IC141x, IC141y, calldataload(add(pubSignals, 4480)))
                
                g1_mulAccC(_pVk, IC142x, IC142y, calldataload(add(pubSignals, 4512)))
                
                g1_mulAccC(_pVk, IC143x, IC143y, calldataload(add(pubSignals, 4544)))
                
                g1_mulAccC(_pVk, IC144x, IC144y, calldataload(add(pubSignals, 4576)))
                
                g1_mulAccC(_pVk, IC145x, IC145y, calldataload(add(pubSignals, 4608)))
                
                g1_mulAccC(_pVk, IC146x, IC146y, calldataload(add(pubSignals, 4640)))
                
                g1_mulAccC(_pVk, IC147x, IC147y, calldataload(add(pubSignals, 4672)))
                
                g1_mulAccC(_pVk, IC148x, IC148y, calldataload(add(pubSignals, 4704)))
                
                g1_mulAccC(_pVk, IC149x, IC149y, calldataload(add(pubSignals, 4736)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            
            checkField(calldataload(add(_pubSignals, 3232)))
            
            checkField(calldataload(add(_pubSignals, 3264)))
            
            checkField(calldataload(add(_pubSignals, 3296)))
            
            checkField(calldataload(add(_pubSignals, 3328)))
            
            checkField(calldataload(add(_pubSignals, 3360)))
            
            checkField(calldataload(add(_pubSignals, 3392)))
            
            checkField(calldataload(add(_pubSignals, 3424)))
            
            checkField(calldataload(add(_pubSignals, 3456)))
            
            checkField(calldataload(add(_pubSignals, 3488)))
            
            checkField(calldataload(add(_pubSignals, 3520)))
            
            checkField(calldataload(add(_pubSignals, 3552)))
            
            checkField(calldataload(add(_pubSignals, 3584)))
            
            checkField(calldataload(add(_pubSignals, 3616)))
            
            checkField(calldataload(add(_pubSignals, 3648)))
            
            checkField(calldataload(add(_pubSignals, 3680)))
            
            checkField(calldataload(add(_pubSignals, 3712)))
            
            checkField(calldataload(add(_pubSignals, 3744)))
            
            checkField(calldataload(add(_pubSignals, 3776)))
            
            checkField(calldataload(add(_pubSignals, 3808)))
            
            checkField(calldataload(add(_pubSignals, 3840)))
            
            checkField(calldataload(add(_pubSignals, 3872)))
            
            checkField(calldataload(add(_pubSignals, 3904)))
            
            checkField(calldataload(add(_pubSignals, 3936)))
            
            checkField(calldataload(add(_pubSignals, 3968)))
            
            checkField(calldataload(add(_pubSignals, 4000)))
            
            checkField(calldataload(add(_pubSignals, 4032)))
            
            checkField(calldataload(add(_pubSignals, 4064)))
            
            checkField(calldataload(add(_pubSignals, 4096)))
            
            checkField(calldataload(add(_pubSignals, 4128)))
            
            checkField(calldataload(add(_pubSignals, 4160)))
            
            checkField(calldataload(add(_pubSignals, 4192)))
            
            checkField(calldataload(add(_pubSignals, 4224)))
            
            checkField(calldataload(add(_pubSignals, 4256)))
            
            checkField(calldataload(add(_pubSignals, 4288)))
            
            checkField(calldataload(add(_pubSignals, 4320)))
            
            checkField(calldataload(add(_pubSignals, 4352)))
            
            checkField(calldataload(add(_pubSignals, 4384)))
            
            checkField(calldataload(add(_pubSignals, 4416)))
            
            checkField(calldataload(add(_pubSignals, 4448)))
            
            checkField(calldataload(add(_pubSignals, 4480)))
            
            checkField(calldataload(add(_pubSignals, 4512)))
            
            checkField(calldataload(add(_pubSignals, 4544)))
            
            checkField(calldataload(add(_pubSignals, 4576)))
            
            checkField(calldataload(add(_pubSignals, 4608)))
            
            checkField(calldataload(add(_pubSignals, 4640)))
            
            checkField(calldataload(add(_pubSignals, 4672)))
            
            checkField(calldataload(add(_pubSignals, 4704)))
            
            checkField(calldataload(add(_pubSignals, 4736)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }
