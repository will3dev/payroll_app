// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract MintCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        1480449047977964171072310369641120441468835017922331576683236001946129569551;
    uint256 public constant IC0_Y =
        3953063361775832522828903958602473768286027086987899160360011957662293592943;
    uint256 public constant IC1_X =
        544635890205320580387133215035441942546260013003830644255067820958865380898;
    uint256 public constant IC1_Y =
        12204651122448456714559768256065973379338494383341162013929733186756531846307;
    uint256 public constant IC2_X =
        10700848488294371879045421888839376893499588971986455134556496265814649529525;
    uint256 public constant IC2_Y =
        16689250570767975581401840141726462391479545013225594053270127710432509425641;
    uint256 public constant IC3_X =
        6995002903944056838885810874675678757827120256759291204043485204405263228481;
    uint256 public constant IC3_Y =
        3305696599446460776557376084116680375411590717241483996986332221576350998253;
    uint256 public constant IC4_X =
        9564851474013322101050023319904907997885259532648001068199225910740350763591;
    uint256 public constant IC4_Y =
        17639063008836052604060890669648936126597920039664719387170418852036475134851;
    uint256 public constant IC5_X =
        18927996934137498053162055296113249396791513464931099203261545839147898549705;
    uint256 public constant IC5_Y =
        12615638735935518241062524410504482599698484856899905325268913430751245001717;
    uint256 public constant IC6_X =
        7123461669952967602801137748780527334404810966029836154334999122858801181435;
    uint256 public constant IC6_Y =
        2525577277444011188378693139226011475520683466155511741140732112889449873514;
    uint256 public constant IC7_X =
        4933507078591124442547011926091096642579215720602282791809534692452445516542;
    uint256 public constant IC7_Y =
        13073949234810307545076053992249433326058021994307878551713772325077660340428;
    uint256 public constant IC8_X =
        5052304751239681763932312355675029883617528313590242439948037956979256471977;
    uint256 public constant IC8_Y =
        6642294977304183016462500339547461412648394827396694655805354168452831124682;
    uint256 public constant IC9_X =
        3668733488647056091981910512783571188413072387362302641576486489497594431590;
    uint256 public constant IC9_Y =
        21496100203004292140834609139512263158282523479831492646541856913646517229047;
    uint256 public constant IC10_X =
        14036717027857488031191066058644332680430500631888122997810100213837226046038;
    uint256 public constant IC10_Y =
        854710276251068877959239703774841552945241209002777106871256592069063997273;
    uint256 public constant IC11_X =
        3626713625221640532102088468334394255028177307558822088027568085619046173338;
    uint256 public constant IC11_Y =
        17045509890245611384808768872650001530938223992928350091726719841761899747413;
    uint256 public constant IC12_X =
        2636218324148494795452880654892282703605049690432415285581204992959541329431;
    uint256 public constant IC12_Y =
        5952911493195006420017885409069509130352331516491415230770292940896552042375;
    uint256 public constant IC13_X =
        12527290539854286059392971838588450697913474439822491799476192227185694820845;
    uint256 public constant IC13_Y =
        14884166678890557275752797485951615831852026146979539913041049446896715328812;
    uint256 public constant IC14_X =
        655880406759268374267301048185067196361568885100286622773688916437057814906;
    uint256 public constant IC14_Y =
        16447622792001608988493820481291978341369378443227639776697331347873673890693;
    uint256 public constant IC15_X =
        12856162037534205457493972618226950763244580611521519896969666537550824466972;
    uint256 public constant IC15_Y =
        17353123056086203693917419293465674784068043056888481735855877792148304000781;
    uint256 public constant IC16_X =
        1667417611270922998956408580607096013030883928974080084390212881792617372787;
    uint256 public constant IC16_Y =
        2275420465350824918784442095490343240071311457205157329968791622449278317136;
    uint256 public constant IC17_X =
        5051759044698831516268970196345983797575356805722441007679905205535291520730;
    uint256 public constant IC17_Y =
        17952430147322577265380303365605545743841520611289650542174692222066228895624;
    uint256 public constant IC18_X =
        12713458649723819559532600029188547254552896004101520132672590438774094755401;
    uint256 public constant IC18_Y =
        6246647674829637743156920665186988146521987797788558149892450942665818389278;
    uint256 public constant IC19_X =
        7773392938520107042368564381754707053550481914083808581501347472433203111041;
    uint256 public constant IC19_Y =
        19896981469044671656867058025997979095245274622509329424810635187259210527464;
    uint256 public constant IC20_X =
        3740113747849368850277064310079089622496765271980069030453792492878597919590;
    uint256 public constant IC20_Y =
        8349093154444723141606762761361054441745650230160692982372141925796698101753;
    uint256 public constant IC21_X =
        17283728700596475270740041298527614980888300659576252552678844655992522161809;
    uint256 public constant IC21_Y =
        4943585580233704713004445108221428115308777630364111992861518589659626768128;
    uint256 public constant IC22_X =
        18282198615670436533793247693580702245151335495779572292790289281553541222042;
    uint256 public constant IC22_Y =
        19446628097275912372869957397057526971712560181005164853651003115174203504662;
    uint256 public constant IC23_X =
        14820036848465834030813761368631661488490020520585580493654287542039388048111;
    uint256 public constant IC23_Y =
        3409787343340812242295361811104672396268752614913006700249465250787398868721;
    uint256 public constant IC24_X =
        3686171785775863401700131591657107292361549624163982613767039895706666623633;
    uint256 public constant IC24_Y =
        10355280118939347117479763463435251604000758006881821574178482323171458800548;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[24] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
